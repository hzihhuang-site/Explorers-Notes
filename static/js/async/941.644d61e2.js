"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["941"],{4371:function(e,n,s){s.r(n),s.d(n,{default:function(){return c}});var r=s(2676),d=s(453);function i(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",h3:"h3",p:"p",ul:"ul",li:"li",code:"code",ol:"ol",strong:"strong",blockquote:"blockquote",pre:"pre",h4:"h4"},(0,d.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"浏览器上的数据库-indexeddb",children:["浏览器上的数据库 IndexedDB",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#浏览器上的数据库-indexeddb",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"简介",children:["简介",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#简介",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"背景",children:["背景",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#背景",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"随着浏览器的处理能力不断增强，越来越多的网站开始考虑，将大量数据储存在客户端，这样可以减少用户等待从服务器获取数据的时间。"}),"\n",(0,r.jsx)(n.p,{children:"现有的浏览器端数据储存方案，都不适合储存大量数据。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cookie"})," 不超过 ",(0,r.jsx)(n.code,{children:"4KB"}),"，且每次请求都会发送回服务器端"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Window.name"})," 属性缺乏安全性，且没有统一的标准"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"localStorage/sessionStorage"})," 在 ",(0,r.jsx)(n.code,{children:"2.5MB"})," 到 ",(0,r.jsx)(n.code,{children:"10MB"})," 之间（各家浏览器不同）"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"所以，需要一种新的解决方案，这就是IndexedDB诞生的背景。"}),"\n",(0,r.jsxs)(n.h3,{id:"特点",children:["特点:",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#特点",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["简单的说 ",(0,r.jsx)(n.code,{children:"IndexedDB"})," 就是浏览器端数据库。它可以被网页脚本程序创建和操作。允许储存大量数据，提供查找接口，还能建立索引。\n这些都是 ",(0,r.jsx)(n.code,{children:"localStorage"})," 所不具备的。就数据库类型而言，",(0,r.jsx)(n.code,{children:"IndexedDB"})," 不属于关系型数据库（不支持 ",(0,r.jsx)(n.code,{children:"SQL"})," 查询语句），更接近 ",(0,r.jsx)(n.code,{children:"NoSQL"})," 数据库。"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"键值对储存:"})}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"IndexedDB内部采用对象仓库（object store）存放数据。所有类型的数据都可以直接存入，包括JavaScript对象。在对象仓库中，数据以“键值对”的形式保存，每一个数据都有对应的键名，键名是独一无二的，不能有重复，否则会抛出一个错误。"}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"异步:"})}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"IndexedDB操作时不会锁死浏览器，用户依然可以进行其他操作，这与localStorage形成对比，后者的操作是同步的。异步设计是为了防止大量数据的读写，拖慢网页的表现。"}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"支持事务:"})}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"IndexedDB支持事务（transaction），这意味着一系列操作步骤之中，只要有一步失败，整个事务就都取消，数据库回到事务发生之前的状态，不存在只改写一部分数据的情况。"}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"同源策略:"})}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"IndexedDB也受到同源策略，每一个数据库对应创建该数据库的域名。来自不同域名的网页，只能访问自身域名下的数据库，而不能访问其他域名下的数据库。"}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"5",children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"储存空间大:"})}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"IndexedDB的储存空间比localStorage大得多，一般来说不少于250MB。IE的储存上限是250MB，Chrome和Opera是剩余空间的某个百分比，Firefox则没有上限。"}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"6",children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"支持二进制储存:"})}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"IndexedDB不仅可以储存字符串，还可以储存二进制数据。"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"基本流程",children:["基本流程",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基本流程",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"前置",children:["前置",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前置",children:"#"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"你需要知道:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"你可以在同一站点上创建多个 indexedDB(数据库)"}),"\n",(0,r.jsx)(n.li,{children:"每个数据下面也可以创建多个 objectStore(表)"}),"\n",(0,r.jsx)(n.li,{children:"每个表里面的数据是 key value 键值对的形式，且value值可以是：字符串、布尔、数组、对象、二进制等类型"}),"\n",(0,r.jsx)(n.li,{children:"异步！！！操作基本都是异步，需要繁琐的监听事件"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"连接数据库",children:["连接数据库",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#连接数据库",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["想要在 ",(0,r.jsx)(n.code,{children:"indexedDB"})," 里面存储数据，需要两个步骤:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"连接(打开)数据库"}),"\n",(0,r.jsxs)(n.li,{children:["选择需要对哪个表 ",(0,r.jsx)(n.code,{children:"objectStore(表)"})," 进行数据操作"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const request = window.indexedDB.open('mydb', 1);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码表示，打开一个名为 ",(0,r.jsx)(n.code,{children:"mydb"}),"、版本为 ",(0,r.jsx)(n.code,{children:"1"})," 的数据库。如果该数据库不存在，则会新建该数据库。如果省略第二个参数，则会自动创建版本为1的该数据库。\n",(0,r.jsx)(n.code,{children:"open"})," 方法有两个参数:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"name: 数据库名称(string)"}),"\n",(0,r.jsx)(n.li,{children:"version: 版本，是一个大于0的正整数（0将报错）"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"打开数据库的结果是有可能触发 4 种事件"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"success: 打开成功"}),"\n",(0,r.jsx)(n.li,{children:"error: 打开失败"}),"\n",(0,r.jsxs)(n.li,{children:["upgradeneeded: 第一次打开该数据库 or 数据库 ",(0,r.jsx)(n.code,{children:"版本"})," 发生变化"]}),"\n",(0,r.jsx)(n.li,{children:"blocked: 上一次的数据库连接还未关闭"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["第一次打开数据库会先触发 ",(0,r.jsx)(n.code,{children:"upgradeneeded"})," 再触发 ",(0,r.jsx)(n.code,{children:"success"})," 事件。(每次版本升级同)\nps: 版本只能升不能降"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const openRequest = window.indexedDB.open('test', 1);\nvar db;\n\nopenRequest.onupgradeneeded = (e) => {\n  console.log('版本升级中')\n}\n\nopenRequest.success = (e) => {\n  console.log('成功')\n  db = e.target.result; // 这里拿到 test 数据库\n}\n\\\n\nopenRequest.error = (e) => {\n  console.log('失败')\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"open"})," 方法返回的是一个对象（IDBOpenDBRequest），回调函数定义在这个对象上面。"]}),"\n",(0,r.jsxs)(n.li,{children:["回调函数接受一个事件对象 ",(0,r.jsx)(n.code,{children:"event"})," 作为参数，它的 ",(0,r.jsx)(n.code,{children:"target.result"})," 属性就指向打开的IndexedDB数据库。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"创建数据表",children:["创建数据表",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建数据表",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"获取到数据库实例后，就能通过实例对象操作数据表了"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'db.createObjectStore("firstTable");\n'})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码创建了一个名为 ",(0,r.jsx)(n.code,{children:"firstTable"})," 的对象仓库。"]}),"\n",(0,r.jsxs)(n.p,{children:["此方法还可以接受第二个对象参数，用来设置 ",(0,r.jsx)(n.code,{children:"表"})," 的属性"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'db.createObjectStore("test", { keyPath: \'id\' }); // 健名（唯一）\ndb.createObjectStore("test", { autoIncrement: true }); // 自动递增（整数）\n'})}),"\n",(0,r.jsxs)(n.p,{children:["如果该对象仓库已经存在，就会抛出一个错误。可以通过 ",(0,r.jsx)(n.code,{children:"objectStoreNames"})," 属性来检测错误。\n",(0,r.jsx)(n.code,{children:"objectStoreNames"})," 属性返回了当前数据库所有 ",(0,r.jsx)(n.code,{children:"表"})," 的名称。可以使用 ",(0,r.jsx)(n.code,{children:"contains"})," 方法，检查数据库是否包含某个 ",(0,r.jsx)(n.code,{children:"表"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'if(!db.objectStoreNames.contains("firstOS")) {\n  db.createObjectStore("firstOS");\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"数据库事务",children:["数据库事务",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据库事务",children:"#"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"因为数据库的特性，防止我们在改变数据的过程中突然中断了，会自动直接取消本次修改。\n所以每次操作数据之前都必须创建数据库事务。"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'const t = db.transaction(["firstTable"], "readwrite");\n'})}),"\n",(0,r.jsx)(n.p,{children:"此方法接收两个参数："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"数组：填写需要操作的表的名字（[table1, table2, ...]）"}),"\n",(0,r.jsxs)(n.li,{children:["操作类型：",(0,r.jsx)(n.code,{children:"readonly(只读)"})," or ",(0,r.jsx)(n.code,{children:"readwrite(读写)"})]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["返回一个事务对象，该对象的 ",(0,r.jsx)(n.code,{children:"objectStore"})," 方法用于获取指定的表(只能在你创建事物时传入的数组中选取)。"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'const t = db.transaction(["firstTable"], "readwrite");\nconst store = t.objectStore("firstTable")\n'})}),"\n",(0,r.jsx)(n.p,{children:"返回的事务对象中有 3 个事件"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"abort: 事务中断"}),"\n",(0,r.jsx)(n.li,{children:"complete: 事务完成"}),"\n",(0,r.jsx)(n.li,{children:"error: 事务出错"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'const transaction = db.transaction(["test"], "readonly");  \ntransaction.oncomplete = function(event) {\n  // some code\n};\n'})}),"\n",(0,r.jsx)(n.p,{children:"返回的 objectStore 对象有以下方法，用于操作数据。"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"add — 添加数据"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"add"})," 方法是异步的，有自己的 ",(0,r.jsx)(n.code,{children:"success"})," and ",(0,r.jsx)(n.code,{children:"error"})," 事件"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'const store = t.objectStore("firstTable");\nconst obj = { name: \'zihao\', age: 18 }\n// 将对象 obj 存入 firstTable 表中，并且它的键名为 1\nconst request = store.add(obj, 1)\n\nrequest.onerror = function(e) {\n     console.log("Error",e.target.error.name);\n}\n\nrequest.onsuccess = function(e) {\n    console.log("数据添加成功！");\n}\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"get — 读取数据"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"get"})," 方法是异步的，有自己的 ",(0,r.jsx)(n.code,{children:"success"})," and ",(0,r.jsx)(n.code,{children:"error"})," 事件"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'const store = t.objectStore("firstTable");\n// 获取 firstTable 中，键名为 1 的值\nconst request = store.get(1)\n\nrequest.onsuccess = function(e) {\n    console.log("获取成功", e.target.result);\n}\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"从创建事务到读取数据，所有操作方法也可以写成下面这样链式形式。"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'db.transaction(["test"], "readonly")\n  .objectStore("test")\n  .get(X)\n  .onsuccess = function(e){}\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"put — 更新数据"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["用法同 ",(0,r.jsx)(n.code,{children:"add"})," 相似，异步"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const obj = { p:456 };\nconst request = store.put(obj, 1);\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsx)(n.li,{children:"delete — 删除数据"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["用法同 ",(0,r.jsx)(n.code,{children:"get"})," 相似, 异步"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const request = store.delete(1);\n"})}),"\n",(0,r.jsx)(n.p,{children:"到此为止，整个数据库的创建以及基本使用已经会了。\n你可以自行尝试去创建或使用一下。"}),"\n",(0,r.jsxs)(n.h2,{id:"高级用法",children:["高级用法",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#高级用法",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"index",children:["Index",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#index",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"要根据其他对象字段进行搜索，我们需要创建一个名为“索引（index）”的附加数据结构。"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"objectStore.createIndex(name, keyPath, [options]);"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"name — 索引名称"}),"\n",(0,r.jsx)(n.li,{children:"keyPath — 索引应该跟踪的对象字段的路径（我们将根据该字段进行搜索）。"}),"\n",(0,r.jsxs)(n.li,{children:["option：","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"unique — 如果为true，则存储中只有一个对象在 ​keyPath​ 上具有给定值。"}),"\n",(0,r.jsx)(n.li,{children:"multiEntry — 只有 ​keypath​ 上的值是数组时才使用。"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"在这之前的实例中，我们是通过默认创建表的时候给的 keyPath 来查询的\n假设我们想通过 age 年龄来进行搜索"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const openRequest = window.indexedDB.open('mydb', 1);\nopenRequest.onupgradeneeded = function() {\n  // 在 versionchange 事务中，我们必须在这里创建索引\n  let firstTable = db.createObjectStore('firstTable', {keyPath: 'id'});\n  let index = firstTable.createIndex('age_idx', 'age');\n};\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"该索引将跟踪 age 字段。"}),"\n",(0,r.jsx)(n.li,{children:"年龄不是唯一的，可能有很多人年龄相同，所以我们不设置唯一 ​unique​ 选项。"}),"\n",(0,r.jsx)(n.li,{children:"年龄不是一个数组，因此不适用多入口 ​multiEntry​ 标志。"}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"基于-index-获取数据",children:["基于 index 获取数据",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基于-index-获取数据",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'let transaction = db.transaction("firstTable"); // 只读\nlet firstTable = transaction.objectStore("firstTable");\nlet ageIndex = firstTable.index("age_idx");\n\nlet request = ageIndex.getAll(18);\n\nrequest.onsuccess = function() {\n  if (request.result !== undefined) {\n    console.log("age", request.result); // 所有年龄是 18 的数据\n  }\n};\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"基于-index-删除数据",children:["基于 index 删除数据",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基于-index-删除数据",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// 找到年龄 = 18 的钥匙\nlet request = ageIndex.getKey(18);\n\nrequest.onsuccess = function() {\n  let id = request.result;\n  let deleteRequest = firstTable.delete(id);\n};\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"光标cursors",children:["光标(Cursors)",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#光标cursors",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"api-总览",children:["API 总览",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#api-总览",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"idbdatabase",children:["IDBDatabase",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#idbdatabase",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"name — 数据库名称"}),"\n",(0,r.jsxs)(n.li,{children:["objectStoreNames — 当前数据库下所有 表的名称 ",(0,r.jsx)(n.code,{children:"string[]"})]}),"\n",(0,r.jsx)(n.li,{children:"version — 当前数据库的版本"}),"\n",(0,r.jsx)(n.li,{children:"close() — 关闭当前数据库连接"}),"\n",(0,r.jsx)(n.li,{children:"createObjectStore() —— 创建表"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"(name: string, options?: { keyPath?: string; autoIncrement?: boolean; }) => IDBObjectStore"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"deleteObjectStore() — 删除表"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"(name: string) => void"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"transaction()"}),"\n",(0,r.jsx)(n.li,{children:"close"}),"\n",(0,r.jsx)(n.li,{children:"versionchange"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"idbtransaction",children:["IDBTransaction",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#idbtransaction",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"db — 当前事务的数据库对象(IDBDatabase)"}),"\n",(0,r.jsx)(n.li,{children:"durability"}),"\n",(0,r.jsx)(n.li,{children:"error — 错误事务类型"}),"\n",(0,r.jsxs)(n.li,{children:["mode — 事务的操作模式 ",(0,r.jsx)(n.code,{children:"readonly"})," or ",(0,r.jsx)(n.code,{children:"readwrite"})]}),"\n",(0,r.jsxs)(n.li,{children:["objectStoreNames — 当前事务下操作的表的名称 ",(0,r.jsx)(n.code,{children:"string[]"})]}),"\n",(0,r.jsx)(n.li,{children:"abort()"}),"\n",(0,r.jsx)(n.li,{children:"commit()"}),"\n",(0,r.jsx)(n.li,{children:"objectStore()"}),"\n",(0,r.jsx)(n.li,{children:"abort"}),"\n",(0,r.jsx)(n.li,{children:"complete"}),"\n",(0,r.jsx)(n.li,{children:"error"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"idbobjectstore",children:["IDBObjectStore",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#idbobjectstore",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["autoIncrement — 是否 ",(0,r.jsx)(n.code,{children:"自增"})]}),"\n",(0,r.jsx)(n.li,{children:"indexNames — indexes 名称列表"}),"\n",(0,r.jsx)(n.li,{children:"keyPath — 当前 objectStore 索引"}),"\n",(0,r.jsx)(n.li,{children:"name"}),"\n",(0,r.jsx)(n.li,{children:"transaction"}),"\n",(0,r.jsx)(n.li,{children:"add() — 添加数据"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"(obj: any, key?: any) => IDBRequest"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"clear() — 清除全部数据"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"() => IDBRequest"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"count()"}),"\n",(0,r.jsx)(n.li,{children:"createIndex() — 创建 index"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"(name: string, keyPath: string, options?: { unique?: boolean; multiEntry?: boolean; }) => IDBIndex"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"delete() — 删除数据"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"(key: any) => IDBRequest"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"deleteIndex() — 删除 index"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"(indexName: string) => void"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"get() — 查询数据"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"(key: any) => IDBRequest"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"getAll() — 查询全部数据"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"() => IDBRequest"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"put() — 更新数据"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"put(obj: any, key?: any) => IDBRequest"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"getAllKeys()"}),"\n",(0,r.jsx)(n.li,{children:"getKey()"}),"\n",(0,r.jsx)(n.li,{children:"index()"}),"\n",(0,r.jsx)(n.li,{children:"openCursor()"}),"\n",(0,r.jsx)(n.li,{children:"openKeyCursor()"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"idbrequest",children:["IDBRequest",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#idbrequest",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"error — 请求失败"}),"\n",(0,r.jsx)(n.li,{children:"readyState — 请求状态"}),"\n",(0,r.jsx)(n.li,{children:"result — 请求结果"}),"\n",(0,r.jsx)(n.li,{children:"source — 请求来源"}),"\n",(0,r.jsx)(n.li,{children:"transaction — 请求到事务"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"可监听事件:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"error — 请求失败"}),"\n",(0,r.jsx)(n.li,{children:"success — 请求成功"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"idbindex",children:["IDBIndex",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#idbindex",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"keyPath — 当前 index 索引"}),"\n",(0,r.jsx)(n.li,{children:"multiEntry"}),"\n",(0,r.jsx)(n.li,{children:"name — 当前 index 的 name"}),"\n",(0,r.jsx)(n.li,{children:"objectStore — 当前 index 的 objectStore"}),"\n",(0,r.jsx)(n.li,{children:"unique — 当前索引是否唯一"}),"\n",(0,r.jsx)(n.li,{children:"count()"}),"\n",(0,r.jsx)(n.li,{children:"get() — 返回以当前 index索引为 keyPath 的值"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"(key?: any) => IDBRequest"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"getAll()"}),"\n",(0,r.jsx)(n.li,{children:"getAllKeys()"}),"\n",(0,r.jsx)(n.li,{children:"getKey()"}),"\n",(0,r.jsx)(n.li,{children:"openCursor()"}),"\n",(0,r.jsx)(n.li,{children:"openKeyCursor()"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"idbcursor",children:["IDBCursor",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#idbcursor",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"direction"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"key"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"primaryKey"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"request"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"source"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"advance()"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"continue()"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"continuePrimaryKey()"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"delete()"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"update()"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"dexiejs",children:[(0,r.jsx)(n.a,{href:"https://dexie.org/",target:"_blank",rel:"noopener noreferrer",children:"Dexie.js"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dexiejs",children:"#"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["对 indexedDB 封装的一个库，能够让我们向 jquery 一样链式调用，省去了维护各种异步事件操作的时间。支持 ",(0,r.jsx)(n.code,{children:"TypeScript"}),"、",(0,r.jsx)(n.code,{children:"React"}),"、",(0,r.jsx)(n.code,{children:"Angular"}),"、",(0,r.jsx)(n.code,{children:"Svelte"})]}),"\n",(0,r.jsxs)(n.p,{children:["以 ",(0,r.jsx)(n.code,{children:"React"})," 为例操作一遍"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"创建",children:["创建",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建",children:"#"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["这里创建了一个名叫 ",(0,r.jsx)(n.code,{children:"mydb"})," 的数据库，版本为 ",(0,r.jsx)(n.code,{children:"1"}),"，里面有一个表 ",(0,r.jsx)(n.code,{children:"fristTable"}),"，表内容规定为一个有 ",(0,r.jsx)(n.code,{children:"id"}),"，",(0,r.jsx)(n.code,{children:"name"}),"，",(0,r.jsx)(n.code,{children:"age"})," 三个属性的对象，且 ",(0,r.jsx)(n.code,{children:"id"})," 自增"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// db.js\nimport Dexie from 'dexie';\n\n// 导出给其他地方使用\nexport const db = new Dexie('mydb');\n\ndb.version(1).stores({\n  fristTable: '++id, name, age',\n})\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["如果使用的是 ",(0,r.jsx)(n.code,{children:"typescript"})," 需要类型支持可以这样写"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// db.ts\nimport Dexie, { Table } from 'dexie';\n\nexport interface FristTableType {\n  id?: number;\n  name: string;\n  age: number;\n}\n\nexport class MyDexieDB extends Dexie {\n  friends!: Table<FristTableType>; // 绑定表类型 \n\n  constructor() {\n    super('mydb'); // 定义数据库名字\n    this.version(1).stores({\n      friends: '++id, name, age'\n    });\n  }\n}\n\nexport const db = new MyDexieDB();\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"添加数据",children:["添加数据",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#添加数据",children:"#"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["因为上面定义表的时候使用的是自增的 ",(0,r.jsx)(n.code,{children:"id"})," 所以你可以不需要传入 ",(0,r.jsx)(n.code,{children:"id"}),"，按照整数自增下去，该与表中 ",(0,r.jsx)(n.code,{children:"key"})," 一一对应\n也可以传递 ",(0,r.jsx)(n.code,{children:"id"}),"，会做对比，如果当前表中没有该 ",(0,r.jsx)(n.code,{children:"id"}),",那么添加成功，否则添加失败"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { db } from './db.ts';\nconst Demo = () => {\n  const handleAdd = () => {\n    db.fristTable.add({\n      name: 'zihao',\n      age: 18\n    }).then().catch()\n  }\n  return (\n    <div onClick={handleAdd}>123</div>\n  )\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"查询数据",children:["查询数据",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#查询数据",children:"#"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"查询 id 为 key 的数据"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { db } from './db.ts';\nconst Demo = () => {\n  const handleGet =() => {\n    db.fristTable\n      .get(key)\n      .then(res => console.log(res))\n      .catch()\n  }\n  return (\n    <div onClick={handleGet}>123</div>\n  )\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"筛选数据",children:["筛选数据",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#筛选数据",children:"#"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"筛选出 10 <= id < 20 区间的所有数据"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { db } from './db.ts';\nconst Demo = () => {\n  const handleGet =() => {\n    db.fristTable\n      .where('id')\n      .between(10, 20)\n      .then(res => console.log(res))\n      .catch()\n  }\n  return (\n    <div onClick={handleGet}>123</div>\n  )\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["更多使用自行查看",(0,r.jsx)(n.a,{href:"https://dexie.org/",target:"_blank",rel:"noopener noreferrer",children:"官网"})]})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}let c=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["frontEnd%2Fjavascript%2FIndexedDB.md"]={toc:[{text:"简介",id:"简介",depth:2},{text:"背景",id:"背景",depth:3},{text:"特点:",id:"特点",depth:3},{text:"基本流程",id:"基本流程",depth:2},{text:"前置",id:"前置",depth:3},{text:"连接数据库",id:"连接数据库",depth:3},{text:"创建数据表",id:"创建数据表",depth:3},{text:"数据库事务",id:"数据库事务",depth:3},{text:"高级用法",id:"高级用法",depth:2},{text:"Index",id:"index",depth:3},{text:"基于 index 获取数据",id:"基于-index-获取数据",depth:4},{text:"基于 index 删除数据",id:"基于-index-删除数据",depth:4},{text:"光标(Cursors)",id:"光标cursors",depth:3},{text:"API 总览",id:"api-总览",depth:2},{text:"IDBDatabase",id:"idbdatabase",depth:3},{text:"IDBTransaction",id:"idbtransaction",depth:3},{text:"IDBObjectStore",id:"idbobjectstore",depth:3},{text:"IDBRequest",id:"idbrequest",depth:3},{text:"IDBIndex",id:"idbindex",depth:3},{text:"IDBCursor",id:"idbcursor",depth:3},{text:"Dexie.js",id:"dexiejs",depth:2},{text:"创建",id:"创建",depth:3},{text:"添加数据",id:"添加数据",depth:3},{text:"查询数据",id:"查询数据",depth:3},{text:"筛选数据",id:"筛选数据",depth:3}],title:"IndexedDB 数据库",frontmatter:{title:"IndexedDB 数据库",date:"2023-08-21T16:46:09.000Z"}}}}]);