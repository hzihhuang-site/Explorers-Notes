"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["880"],{7121:function(e,n,r){r.r(n),r.d(n,{default:function(){return h}});var a=r(2676),d=r(453);function i(e){let n=Object.assign({p:"p",ol:"ol",li:"li",h2:"h2",a:"a",h3:"h3",pre:"pre",code:"code"},(0,d.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"工具类型（Utility Types）是 TypeScript 提供的一组内置类型，用于基于已有的类型进行操作和变换，生成新的类型。它们可以帮助开发者更高效地定义类型，避免重复劳动，并让类型系统更加灵活和强大。"}),"\n",(0,a.jsx)(n.p,{children:"工具类型的特点:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"基于现有类型：工具类型通常以输入的类型为基础，进行某种变换或提取。"}),"\n",(0,a.jsx)(n.li,{children:"灵活性高：可以组合使用多个工具类型，满足复杂场景需求。"}),"\n",(0,a.jsx)(n.li,{children:"提升开发效率：通过减少手动定义类型的工作量，提高代码的可读性和复用性。"}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"内置工具类型",children:["内置工具类型",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#内置工具类型",children:"#"})]}),"\n",(0,a.jsxs)(n.h3,{id:"partial",children:["Partial",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#partial",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"将类型 T 的所有属性变为可选。"}),"\n",(0,a.jsxs)(n.h3,{id:"required",children:["Required",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#required",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"将类型 T 的所有属性变为必填。"}),"\n",(0,a.jsxs)(n.h3,{id:"readonly",children:["Readonly",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#readonly",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"将类型 T 的所有属性变为只读。"}),"\n",(0,a.jsxs)(n.h3,{id:"pickt-k",children:["Pick<T, K>",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#pickt-k",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"从类型 T 中挑选指定的属性 K 生成新的类型。"}),"\n",(0,a.jsxs)(n.h3,{id:"omitt-k",children:["Omit<T, K>",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#omitt-k",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"从类型 T 中移除指定的属性 K 生成新的类型。"}),"\n",(0,a.jsxs)(n.h3,{id:"recordk-t",children:["Record<K, T>",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#recordk-t",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"创建一个键为类型 K，值为类型 T 的对象类型。"}),"\n",(0,a.jsxs)(n.h3,{id:"excludet-u",children:["Exclude<T, U>",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#excludet-u",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"从类型 T 中排除 U。"}),"\n",(0,a.jsxs)(n.h3,{id:"extractt-u",children:["Extract<T, U>",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#extractt-u",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"从类型 T 中提取 U。"}),"\n",(0,a.jsxs)(n.h3,{id:"nonnullable",children:["NonNullable",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#nonnullable",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"移除类型中的 null 和 undefined。"}),"\n",(0,a.jsxs)(n.h3,{id:"returntype",children:["ReturnType",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#returntype",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"获取函数的返回值类型。"}),"\n",(0,a.jsxs)(n.h3,{id:"instancetype",children:["InstanceType",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#instancetype",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"获取类构造函数的实例类型。"}),"\n",(0,a.jsxs)(n.h3,{id:"parameters",children:["Parameters",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#parameters",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"获取函数的参数类型。"}),"\n",(0,a.jsxs)(n.h2,{id:"自定义工具类型",children:["自定义工具类型",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自定义工具类型",children:"#"})]}),"\n",(0,a.jsxs)(n.h3,{id:"deeppartial",children:["DeepPartial",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#deeppartial",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"实现深度可选，将对象的所有属性递归变为可选。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"type DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\n};\n\n// 示例\ntype User = {\n  id: number;\n  name: string;\n  address: {\n    city: string;\n    zip: number;\n  };\n};\n\ntype PartialUser = DeepPartial<User>;\n// PartialUser 等价于\n// {\n//   id?: number;\n//   name?: string;\n//   address?: {\n//     city?: string;\n//     zip?: number;\n//   };\n// }\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"valueof",children:["ValueOf",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#valueof",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"获取对象类型的所有值类型。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"type ValueOf<T> = T[keyof T];\n\n// 示例\ntype User = {\n  id: number;\n  name: string;\n  active: boolean;\n};\n\ntype UserValues = ValueOf<User>;\n// UserValues 等价于 number | string | boolean\n"})})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(i,{...e})}):i(e)}let h=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["frontEnd%2Ftypescript%2Futility.md"]={toc:[{text:"内置工具类型",id:"内置工具类型",depth:2},{text:"Partial",id:"partial",depth:3},{text:"Required",id:"required",depth:3},{text:"Readonly",id:"readonly",depth:3},{text:"Pick<T, K>",id:"pickt-k",depth:3},{text:"Omit<T, K>",id:"omitt-k",depth:3},{text:"Record<K, T>",id:"recordk-t",depth:3},{text:"Exclude<T, U>",id:"excludet-u",depth:3},{text:"Extract<T, U>",id:"extractt-u",depth:3},{text:"NonNullable",id:"nonnullable",depth:3},{text:"ReturnType",id:"returntype",depth:3},{text:"InstanceType",id:"instancetype",depth:3},{text:"Parameters",id:"parameters",depth:3},{text:"自定义工具类型",id:"自定义工具类型",depth:2},{text:"DeepPartial",id:"deeppartial",depth:3},{text:"ValueOf",id:"valueof",depth:3}],title:"工具类型",headingTitle:"",frontmatter:{title:"工具类型",date:"2025-01-03T16:00:00.000Z"}}}}]);