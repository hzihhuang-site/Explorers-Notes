"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["662"],{8833:function(n,e,i){i.r(e),i.d(e,{default:function(){return r}});var s=i(2676),a=i(453);function t(n){let e=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",h2:"h2",pre:"pre",code:"code",h3:"h3"},(0,a.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"mixin-艺术",children:["Mixin 艺术",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#mixin-艺术",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"Mixin 是 Sass 中的一个强大功能，用于封装可复用的样式块，减少代码重复，提高代码可维护性。通过 Mixin，你可以定义一段样式并传递参数，在多个地方灵活调用。"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"定义和调用：使用 @mixin 定义，@include 调用。"}),"\n",(0,s.jsx)(e.li,{children:"参数化：Mixin 支持参数，使样式更加灵活。"}),"\n",(0,s.jsx)(e.li,{children:"条件判断：可以根据条件生成不同的样式。"}),"\n",(0,s.jsx)(e.li,{children:"常用应用：如按钮样式、响应式布局、边框圆角等。"}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"响应式布局",children:["响应式布局",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#响应式布局",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"快速为一个元素定义它多个设备间的样式。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-scss",children:'.demo {\n  font-size: 16px;\n  @include device("pc") {\n    font-size: 24px;\n  }\n  @include device("laptop") {\n    font-size: 18px;\n  }\n  @include device("pad") {\n    font-size: 14px;\n  }\n  @include device("mobile") {\n    font-size: 12px;\n  }\n}\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-scss",children:'@mixin device($device) {\n  @if $device == "pc" {\n    @media (min-width: 1440px) {\n      @content;\n    }\n  } @else if $device == "laptop" {\n    @media (min-width: 1024px) and (max-width: 1440px) {\n      @content;\n    }\n  } @else if $device == "pad" {\n    @media (min-width: 768px) and (max-width: 1024px) {\n      @content;\n    }\n  } @else if $device == "mobile" {\n    @media (max-width: 767px) {\n      @content;\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(e.h2,{id:"原子类",children:["原子类",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#原子类",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"快速生成原子类，减少重复代码。"}),"\n",(0,s.jsxs)(e.h3,{id:"数值类",children:["数值类",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#数值类",children:"#"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",children:'<div class="mt-14 p-16"></div>\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-scss",children:"// 定义单位类型\n$unit: 'px';\n\n// 定义常用的值\n$atomic-classes: (\n  'mt': (12, 14),\n  'p': (12, 16),\n);\n\n// 定义原子类与 CSS 属性的映射\n$atomic-properties: (\n  'mt': 'margin-top',\n  'p': 'padding',\n);\n\n// 遍历原子类并生成对应的 CSS\n@each $property, $values in $atomic-classes {\n  $css-property: map-get($atomic-properties, $property);\n  @each $value in $values {\n    // 根据映射的属性生成相应的 CSS 类\n    .#{$property}-#{$value} {\n      #{$css-property}: #{$value}#{$unit};\n    }\n  }\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"属性类",children:["属性类",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#属性类",children:"#"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",children:'<div class="flex items-center justify-center"></div>\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-scss",children:"// 属性类映射表：类名与对应的 CSS 规则\n$utility-classes: (\n  'flex'          : 'display: flex;',\n  'items-center'  : 'align-items: center;',\n  'justify-center': 'justify-content: center;',\n);\n\n// 遍历生成属性类的 CSS\n@each $class, $rules in $utility-classes {\n  .#{$class} {\n    #{$rules};\n  }\n}\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"超出省略",children:["超出省略",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#超出省略",children:"#"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-scss",children:"@mixin text-ellipsis($lines: 1) {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box; // 用于多行兼容\n  -webkit-box-orient: vertical;\n\n  @if $lines == 1 {\n    white-space: nowrap; // 单行省略\n  } @else {\n    -webkit-line-clamp: $lines; // 多行省略\n    white-space: normal; // 恢复多行样式\n  }\n}\n\n// 使用示例\n.box1 {\n  @include text-ellipsis();  // 单行省略\n}\n.box2 {\n  @include text-ellipsis(3); // 省略 3 行\n}\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"遮罩层",children:["遮罩层",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#遮罩层",children:"#"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-scss",children:"@mixin overlay($color: black, $opacity: 0.5) {\n  background-color: rgba($color, $opacity);\n  position: absolute;\n  inset: 0;\n}\n\n// 使用示例\n.overlay {\n  @include overlay(#000, 0.7);\n}\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"背景颜色动画",children:["背景颜色动画",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#背景颜色动画",children:"#"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-scss",children:"@mixin animated-background($colors, $duration: 5s) {\n  // 定义唯一的动画名称\n  $animation-name: bg-change-#{unique-id()};\n\n  // 动态生成 keyframes\n  @keyframes #{$animation-name} {\n    @each $color, $index in $colors {\n      #{percentage(($index - 1) / (length($colors) - 1))} {\n        background-color: $color;\n      }\n    }\n  }\n  animation: #{$animation-name} $duration infinite alternate;\n}\n\n// 使用示例\n.box {\n  width: 200px;\n  height: 200px;\n  @include animated-background((#ff7e5f, #feb47b, #86a8e7), 10s);\n}\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"固定元素比例",children:["固定元素比例",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#固定元素比例",children:"#"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-scss",children:"@mixin aspect-ratio($width, $height) {\n  // 使用 @supports 检测浏览器是否支持 aspect-ratio\n  @supports (aspect-ratio: 1) {\n    aspect-ratio: $width / $height;\n  }\n  @supports not (aspect-ratio: 1) {\n    position: relative;\n    \n    &::before {\n      content: '';\n      display: block;\n      width: 100%;\n      padding-top: ($height / $width) * 100%; // 高度按比例计算\n    }\n    \n    & > * {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      width: 100%;\n      height: 100%;\n    }\n  }\n}\n"})})]})}function c(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(t,{...n})}):t(n)}let r=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["frontEnd%2Fsass%2Fmixin.md"]={toc:[{text:"响应式布局",id:"响应式布局",depth:2},{text:"原子类",id:"原子类",depth:2},{text:"数值类",id:"数值类",depth:3},{text:"属性类",id:"属性类",depth:3},{text:"超出省略",id:"超出省略",depth:2},{text:"遮罩层",id:"遮罩层",depth:2},{text:"背景颜色动画",id:"背景颜色动画",depth:2},{text:"固定元素比例",id:"固定元素比例",depth:2}],title:"Mixin 艺术",headingTitle:"Mixin 艺术",frontmatter:{title:"Mixin 艺术",date:"2024-12-31T10:00:00.000Z"}}}}]);