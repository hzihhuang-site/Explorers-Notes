"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["119"],{1959:function(n,e,s){s.r(e),s.d(e,{default:function(){return d}});var l=s(2676),r=s(453);function i(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",blockquote:"blockquote",p:"p",h3:"h3",ul:"ul",li:"li",code:"code",pre:"pre",h4:"h4"},(0,r.ah)(),n.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(e.h1,{id:"svg-深入浅出",children:["SVG 深入浅出",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-深入浅出",children:"#"})]}),"\n",(0,l.jsxs)(e.h2,{id:"一svg-简介",children:["一、SVG 简介",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#一svg-简介",children:"#"})]}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsx)(e.p,{children:"Scalable Vector Graphics —— 可缩放的矢量图"}),"\n",(0,l.jsx)(e.p,{children:"SVG 是 W3C 推出的基于 XML 的二维矢量图形标准，也就是一种用于描述二维的矢量图形。SVG 可以提供高质量的矢量图形渲染，同时由于支持 JavaScript 和文档对象模型，SVG 图形通常具有强大的交互能力。"}),"\n"]}),"\n",(0,l.jsxs)(e.h3,{id:"1svg-的优势",children:["1、SVG 的优势",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1svg-的优势",children:"#"})]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"SVG 是可伸缩的，并且伸缩不会对图像质量造成影响，而一般普通的图像放大或者缩小容易导致变形，例如 JPG 或 PNG 等。"}),"\n",(0,l.jsx)(e.li,{children:"SVG 图像可在任何的分辨率下被高质量地打印。"}),"\n",(0,l.jsx)(e.li,{children:"SVG 图像可被多种工具读取和修改，例如文本编辑器等。"}),"\n",(0,l.jsx)(e.li,{children:"SVG 图像可被搜索、索引、脚本化或压缩 。"}),"\n",(0,l.jsx)(e.li,{children:"SVG 图像与 JPEG 和 GIF 图像比起来，尺寸更小，且可压缩性更强。"}),"\n",(0,l.jsx)(e.li,{children:"SVG 可以与 Java 技术一起运行。"}),"\n"]}),"\n",(0,l.jsxs)(e.h3,{id:"2svg--的使用方式",children:["2、SVG  的使用方式",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2svg--的使用方式",children:"#"})]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["直接在 HTML 中作为 ",(0,l.jsx)(e.code,{children:"<svg>"})," 标签使用。"]}),"\n",(0,l.jsxs)(e.li,{children:["在 HTML 中通过 ",(0,l.jsx)(e.code,{children:"<img>"})," 标签来引用。"]}),"\n",(0,l.jsx)(e.li,{children:"通过浏览器直接打开 SVG 文件。"}),"\n",(0,l.jsx)(e.li,{children:"可以作为 CSS 背景使用。"}),"\n"]}),"\n",(0,l.jsxs)(e.h2,{id:"二学习如何编写-svg",children:["二、学习如何编写 SVG",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#二学习如何编写-svg",children:"#"})]}),"\n",(0,l.jsxs)(e.h3,{id:"1所有的图形都要求写在-svg-中",children:["1、所有的图形都要求写在 svg 中。",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1所有的图形都要求写在-svg-中",children:"#"})]}),"\n",(0,l.jsxs)(e.h3,{id:"2基本图形属性api",children:["2、基本图形、属性、API",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2基本图形属性api",children:"#"})]}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsxs)(e.p,{children:["基本图形 —— ",(0,l.jsx)(e.code,{children:"<rect>"}),"、",(0,l.jsx)(e.code,{children:"<circle>"}),"、",(0,l.jsx)(e.code,{children:"<ellipse>"}),"、",(0,l.jsx)(e.code,{children:"<line>"}),"、",(0,l.jsx)(e.code,{children:"<polyline>"}),"、",(0,l.jsx)(e.code,{children:"<polygon>"})]}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"rect —— 矩形"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-html",children:'<rect x="" y="" width="" height="" rx="" ry="" />\nx: 矩形左上角 x 位置		y: 矩形左上角 y 位置\nwidth: 矩形宽			   height： 矩形高\nrx：矩形 x 轴方向圆角       ry: 矩形 y 轴方向圆角\n'})}),"\n",(0,l.jsx)(e.p,{children:"circle —— 圆"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-html",children:'<circle cx="" cy="" r="" />\ncx: 圆心 x 轴位置		cy: 圆心 y 轴位置\nr: 圆半径\n'})}),"\n",(0,l.jsx)(e.p,{children:"ellipse —— 椭圆"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-html",children:'<ellipse cx="" cy="" rx="" ry="" />\ncx: 圆心 x 轴位置		cy: 圆心 y 轴位置\nrx: x 轴方向长度		    ry:  y 轴方向长度\n'})}),"\n",(0,l.jsx)(e.p,{children:"line —— 线"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-html",children:'<line x1="" y1="" x2="" y2="" />\nx1、y1: 开始点位置\nx2、y2: 结束点位置\n'})}),"\n",(0,l.jsx)(e.p,{children:"polyline —— 折线"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-html",children:'<polyline points="x1 y1 x2 y2 x3 y3 ...." />\npoints: 开始点到结束点的位置\n'})}),"\n",(0,l.jsx)(e.p,{children:"polygon —— 多边形"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-html",children:'<polygon points="x1 y1 x2 y2 x3 y3 ...." />\npoints: 多边形每个点的顶点坐标\n'})}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsx)(e.p,{children:"基本属性 —— fill、stroke、stroke-width、transform"}),"\n"]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"fill —— 填充颜色"}),"\n",(0,l.jsx)(e.li,{children:"stroke —— 描边颜色"}),"\n",(0,l.jsx)(e.li,{children:"stroke-width —— 描边厚度"}),"\n",(0,l.jsx)(e.li,{children:"transform —— 类似于 CSS3 的 transform"}),"\n"]}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsx)(e.p,{children:"基本操作 API"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"// 创建图形\ndocument.createElementNS(ns, tagName)\n\n// 添加图形\nelement.appendChild(childElement)\n\n// 设置/获取属性\nelement.setAttribute(name, value)\nelement.getAttribute(name)\n"})}),"\n",(0,l.jsxs)(e.h3,{id:"3分组标签",children:["3、分组标签",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3分组标签",children:"#"})]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"<g>"}),"标签来创建"]}),"\n",(0,l.jsx)(e.li,{children:"分组标签上的属性会被子标签继承"}),"\n",(0,l.jsx)(e.li,{children:"使用 transform 属性定义分组坐标的变化"}),"\n",(0,l.jsx)(e.li,{children:"分组标签可以嵌套"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-html",children:'<svg>\n    \x3c!-- 这里定义了一个分组，里面有 圆 和 矩形 他们的填充颜色为 blue 描边颜色为 red --\x3e\n	<g stroke="red" fill="blue">\n        <rect width="100" height="100" x="0" y="0" />\n    	<circle r="50" cx="150" cy="150" />\n    </g>\n</svg>\n'})}),"\n",(0,l.jsxs)(e.h3,{id:"4颜色渐变和笔刷",children:["4、颜色、渐变和笔刷",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#4颜色渐变和笔刷",children:"#"})]}),"\n",(0,l.jsxs)(e.h4,{id:"ⅰ认识-rgb-和-hsl",children:["Ⅰ、认识 RGB 和 HSL",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#ⅰ认识-rgb-和-hsl",children:"#"})]}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsx)(e.p,{children:"RGB —— 不符合人类描述颜色的习惯"}),"\n"]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"红色、绿色、蓝色三个分量"}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"格式：rgb( r, g, b ) 或 #rrggbb"}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"每个分量取值范围：[ 0, 255 ]"}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"优势：显示器容易解析"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsx)(e.p,{children:"HSL —— 符合人类描述颜色的习惯"}),"\n"]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"颜色、饱和度、亮度三个分量"}),"\n",(0,l.jsx)(e.li,{children:"格式：hsl( h, s%, l%)"}),"\n",(0,l.jsxs)(e.li,{children:["取值范围：","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"h: [ 0, 359 ]"}),"\n",(0,l.jsx)(e.li,{children:"s，l: [0, 100 ]"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.h4,{id:"ⅱ渐变",children:["Ⅱ、渐变",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#ⅱ渐变",children:"#"})]}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsx)(e.p,{children:"线性渐变"}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"先看代码 —— 其实很容易懂~"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-html",children:'<svg>\n	<defs>\n    	<linearGradient id="grad1" gradientUnits="objectBoundingBox" x1="0" y1="0" x2="1" y2="1">\n            <stop offset="0" stop-color="red" />\n            <stop offset="0.5" stop-color="blue" />\n            <stop offset="1" stop-color="yellow" />\n        </linearGradient>\n    </defs>\n    <rect x="100" y="100" fill="url(#grad1)" width="200" height="150" />\n</svg>\n'})}),"\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.code,{children:"<defs>"})," —— 相当于一个容器，里面存放的就是像渐变一样的工具标签"]}),"\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.code,{children:"<linearGradient>"})," —— 线性渐变标签"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-xml",children:'<linearGradient id="grad1" gradientUnits="objectBoundingBox" x1="0" y1="0" x2="1" y2="1"></linearGradient>\n\x3c!--\n	id: 为这个渐变取名字，方便以后使用\n	gradientUnits: \n		objectBoundingBox: 默认值 以引用渐变的图形大小为坐标 单位 % 0 ~ 1\n		userSpaceOnUser: 以 svg 左上角顶点开始为坐标 单位PX\n	x1,y1: 渐变开始的点 —— 单位由 gradientUnits 类型来决定\n	x2,y2: 渐变结束的点\n--\x3e\n<rect x="100" y="100" fill="url(#grad1)" width="200" height="150" />\n\x3c!--\n	在图形中使用 fill="url(#id)" 来使用这个渐变\n--\x3e\n'})}),"\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.code,{children:"<stop>"})," —— 渐变的颜色切换"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-xml",children:'<stop offset="0" stop-color="red" />\n<stop offset="0.5" stop-color="blue" />\n<stop offset="1" stop-color="yellow" />\n\x3c!--\n	嵌套在渐变标签中使用，这里是一个由 红 => 蓝 => 黄 的一个渐变过程\n	显而易见：\n		offset —— 最终渐变到这个颜色的位置\n		stop-color —— 渐变的颜色\n--\x3e\n'})}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsx)(e.p,{children:"径向渐变"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-xml",children:'\x3c!-- 使用方式与线性渐变一致。 --\x3e\n<radialGradient id="grad2" cx="0.5" cy="0.5" r="0.5" fx="0.6" fy="0.3"></radialGradient>\n\x3c!--\n	cx、cy: 渐变开始的坐标\n	r：渐变的半径\n	fx、fy：渐变的焦点偏移位置\n--\x3e\n'})}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsx)(e.p,{children:"笔刷 —— 自定义背景"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-xml",children:'\x3c!-- 使用方式与渐变一致。 --\x3e\n<svg>\n	<defs>\n    	<pattern id="p1" x="0" y="0" width="0.2" height="0.2">\n            <circle cx="10" cy="10" r="5" fill="red" />\n            <polygon points="30 10 60 50 0 50" fill="green" />\n        </pattern>\n    </defs>\n    <rect x="100" y="100" fill="url(#p1)" stroke="blue" width="200" height="150" />\n</svg>\n'})}),"\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.code,{children:"<pattern>"}),"  使用此标签定义好一个背景，可以被其他图形以 fill 的形式调用，成为那个图形的背景"]}),"\n",(0,l.jsxs)(e.h2,{id:"三path-的使用-高级",children:["三、Path 的使用 （高级）",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#三path-的使用-高级",children:"#"})]}),"\n",(0,l.jsxs)(e.h3,{id:"1path-概述",children:["1、Path 概述",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1path-概述",children:"#"})]}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsx)(e.p,{children:"一个强大的绘图工具"}),"\n",(0,l.jsxs)(e.p,{children:["规范： ",(0,l.jsx)(e.a,{href:"http://www.w3.org/TR/SVG11/paths.html",target:"_blank",rel:"noopener noreferrer",children:"http://www.w3.org/TR/SVG11/paths.html"})]}),"\n",(0,l.jsx)(e.p,{children:"由命令及其参数组成的字符串"}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"命令基本规律"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"区分大小写：大写表示坐标参数为绝对位置，小写则为相对位置"}),"\n",(0,l.jsx)(e.li,{children:"最后的参数表示最终要到达的位置"}),"\n",(0,l.jsx)(e.li,{children:"上一个命令结束的位置就是下一个命令开始的位置"}),"\n",(0,l.jsx)(e.li,{children:"命令可以重复表示重复执行同一条命令"}),"\n"]}),"\n",(0,l.jsxs)(e.h3,{id:"2移动和直线命令",children:["2、移动和直线命令",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2移动和直线命令",children:"#"})]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"M (x, y)+ 移动画笔，后面如果由重复参数，会当作是 L 命令处理"}),"\n",(0,l.jsx)(e.li,{children:"L (x, y)+ 绘制直线到指定位置"}),"\n",(0,l.jsx)(e.li,{children:"H (x)+ 绘制水平线到指定的 x 位置"}),"\n",(0,l.jsx)(e.li,{children:"V (y)+ 绘制竖直线到指定的 y 位置"}),"\n",(0,l.jsx)(e.li,{children:"m、l、h、v 使用相对位置绘制"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-xml",children:'<svg>\n	<path d="M 0 0 h 100\n             M 0 0 v 100\n             M 100 0 v 100\n             M 0 100 h 100\n             M 0 0 l 100 100 \n             M 100 0 l -100 100"\n          stroke="#fff" stroke-width="2" />\n</svg>\n'})}),"\n",(0,l.jsxs)(e.h3,{id:"3弧线命令",children:["3、弧线命令",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3弧线命令",children:"#"})]}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsx)(e.p,{children:"A ( rx, ry xr, laf, sf, x, y ) —— 绘制弧线"}),"\n"]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"rx - ( radius-x ) 弧线所在椭圆的 x 半轴长"}),"\n",(0,l.jsx)(e.li,{children:"ry - ( radius-y ) 弧线所在椭圆的 y 半轴长"}),"\n",(0,l.jsx)(e.li,{children:"xr - ( xAxis-rotation ) 弧线所在椭圆的长轴角度"}),"\n",(0,l.jsx)(e.li,{children:"laf - ( large-arc-flag ) 是否选择弧长较长的那一段弧"}),"\n",(0,l.jsx)(e.li,{children:"sf - ( sweep-flag ) 是否选择逆时针方向的那一段弧"}),"\n",(0,l.jsx)(e.li,{children:"x，y - 弧的终点位置"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-xml",children:'<svg style="height: 100px; width: 100px;">\n    <path d="M 0 0 h 100\n             M 0 0 v 100\n             M 0 100 A 100 100 0 0 0 100 0 \n             "\n          stroke="#000" fill="transparent" />\n</svg>\n\x3c!--\n	效果: 如下\n--\x3e\n'})}),"\n",(0,l.jsxs)(e.h3,{id:"4贝塞尔曲线命令",children:["4、贝塞尔曲线命令",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#4贝塞尔曲线命令",children:"#"})]}),"\n",(0,l.jsx)(e.p,{children:"Q(x1 y1 x y) —— 二次贝塞尔曲线"}),"\n",(0,l.jsx)(e.p,{children:"C(x1 y1 x2 y2 x y) —— 三次贝塞尔曲线"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-xml",children:'<svg style="height: 120px; width: 400px;">\n    <path d="M 0 0 Q 0 100 100 100\n             M 100 100 C 200 0 300 100 400 0\n             "\n          stroke="#000" fill="transparent" />\n</svg>\n\x3c!--\n	使用方法:\n 	  二次 —— Q x1 y1 x y\n		x1、y1 表示的是贝塞尔曲线中的往外拉伸的点\n		x、y 表示的是线的终点\n	  三次 —— C x1 y1 x2 y2 x y\n		类似与二次贝塞尔曲线用法\n	效果：如下\n--\x3e\n'})}),"\n",(0,l.jsxs)(e.h2,{id:"四svg-文本",children:["四、SVG 文本",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#四svg-文本",children:"#"})]}),"\n",(0,l.jsxs)(e.h3,{id:"1text-和--tspan--创建文本",children:["1、text 和  tspan  创建文本",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1text-和--tspan--创建文本",children:"#"})]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-xml",children:'<svg style="height: 200px">\n	<text dx="10 20 30 40 50" dy="10 20 30 40 50">ABCDE</text>\n</svg>\n\x3c!--\n	作用: 在 svg 中展示文本\n	属性:\n	  1、dx、dy —— 用于控制文本基线位置，值可以为一个，或者多个\n		一个的时候，统一设置够所有文字\n		多个的时候，从第一个文字开始依次设置\n	  2、text-anchor —— 文本对齐方式 start middle end\n	使用：text 标签\n	  \n		\n	效果: 如下\n--\x3e\n'})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"使用方法"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-xml",children:'<svg style="height: 200px; width: 800px;">\n    <path id="path1" d="M 100 100\n                        Q 200 0 300 100\n                        T 500 100" stroke="#000" fill="none" />\n    <text style="font-size: 24px;" fill="#000" stroke="#000">\n        <textPath xlink:href="#path1">\n            这个文字先上去，又下来了。Upside down in english!\n        </textPath>\n    </text>\n</svg>\n\x3c!--\n	作用: 将一段文字摆放在一个路径上。\n	属性：\n	  1、xlink:href —— 绑定要使用的路径\n	  2、startOffset —— 文字开始摆放的位置\n	使用：\n	  1、textPath 标签中的 xlink:href 属性绑定需要放置的路径\n	  2、将摆放的文字写入 textPath 标签中\n	效果: 如下\n	ps: 假如你只能看到一根贝塞尔曲线，那你可以尝试着吧这段代码放到 html 中，你将看到完整的样子\n--\x3e\n'})}),"\n",(0,l.jsxs)(e.h3,{id:"3a---插入超链接",children:["3、a - 插入超链接",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3a---插入超链接",children:"#"})]}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsx)(e.p,{children:"使用方式与  html 中的 a 标签基本一致"}),"\n"]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"可以添加在任何的图形上"}),"\n",(0,l.jsx)(e.li,{children:"xlink:href 指定连接地址"}),"\n",(0,l.jsx)(e.li,{children:"xlink:title 指定连接提示"}),"\n",(0,l.jsx)(e.li,{children:"target 指定打开目标"}),"\n"]}),"\n",(0,l.jsxs)(e.h2,{id:"五图形的引用裁切和蒙蔽",children:["五、图形的引用、裁切和蒙蔽",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#五图形的引用裁切和蒙蔽",children:"#"})]}),"\n",(0,l.jsxs)(e.h3,{id:"1clip---裁切图像",children:["1、clip - 裁切图像",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1clip---裁切图像",children:"#"})]}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsx)(e.p,{children:"​	clipPath 定义裁切路径 —— 路径为两个图形的重合处"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-xml",children:'<clipPath id="light-clip">\n    <polygon />\n    <circle />\n</clipPath>\n'})}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsx)(e.p,{children:"图形上加 clip-path 属性指定此块区域被显示出来，其余部分被裁减"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-xml",children:'<ellipse clip-path="url(#light-clip)"/>\n'})}),"\n",(0,l.jsxs)(e.h3,{id:"2mask---创建蒙板",children:["2、mask - 创建蒙板",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2mask---创建蒙板",children:"#"})]}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsx)(e.p,{children:"mask 标签定义蒙板"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-xml",children:'<mask id="fading">\n    <rect />\n</mask>\n'})}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsx)(e.p,{children:"图形添加 mask 属性绑定蒙板"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-xml",children:'<ellipse mask="url(#fading)"/>\n'})}),"\n",(0,l.jsxs)(e.h2,{id:"六svg-动画",children:["六、SVG 动画",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#六svg-动画",children:"#"})]}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsx)(e.p,{children:"svg动画有两种方式绑定要进行动画的元素"}),"\n",(0,l.jsx)(e.p,{children:'xlink:href="url(#id)"'}),"\n",(0,l.jsx)(e.p,{children:"直接写在 元素标签里"}),"\n"]}),"\n",(0,l.jsxs)(e.h3,{id:"1animate",children:["1、animate",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1animate",children:"#"})]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-xml",children:'<animate\n         xlink:href="url(#id)"\n         attributeType="XML"\n         attributeName="x"\n         begin="goright.end"\n         from="100"\n         to="500"\n         dur="3s"\n         fill="freeze"\n         repeatCount="10"\n         />\n\n\x3c!--\n	begin：指定动画开始，这里是指在 goright 动画结束后执行\n	fill=”freeze"：保持在动画最后一帧\n	repeatCount：动画执行次数\n--\x3e\n'})}),"\n",(0,l.jsxs)(e.h3,{id:"2animatetransform",children:["2、animateTransform",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2animatetransform",children:"#"})]}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsx)(e.p,{children:"用法与上面一致，是对 transform 属性的动画修改"}),"\n"]}),"\n",(0,l.jsxs)(e.h3,{id:"3animatemotion",children:["3、animateMotion",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3animatemotion",children:"#"})]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-xml",children:'<animateMotion path="" rotate="auto">\n	<mpath xlink:href="#motion-path" />\n</animateMotion>\n              \n\x3c!--\n	path：控制图形按照这个路径移动\n	或者不设置path —— 使用 mpath 的 xlink:href 属性指定一个 <path>标签\n	rotate:图形的旋转方向\n--\x3e\n'})})]})}function h(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,l.jsx)(e,{...n,children:(0,l.jsx)(i,{...n})}):i(n)}let d=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["frontEnd%2Fhtml%2Fsvg.md"]={toc:[{text:"一、SVG 简介",id:"一svg-简介",depth:2},{text:"1、SVG 的优势",id:"1svg-的优势",depth:3},{text:"2、SVG  的使用方式",id:"2svg--的使用方式",depth:3},{text:"二、学习如何编写 SVG",id:"二学习如何编写-svg",depth:2},{text:"1、所有的图形都要求写在 svg 中。",id:"1所有的图形都要求写在-svg-中",depth:3},{text:"2、基本图形、属性、API",id:"2基本图形属性api",depth:3},{text:"3、分组标签",id:"3分组标签",depth:3},{text:"4、颜色、渐变和笔刷",id:"4颜色渐变和笔刷",depth:3},{text:"Ⅰ、认识 RGB 和 HSL",id:"ⅰ认识-rgb-和-hsl",depth:4},{text:"Ⅱ、渐变",id:"ⅱ渐变",depth:4},{text:"三、Path 的使用 （高级）",id:"三path-的使用-高级",depth:2},{text:"1、Path 概述",id:"1path-概述",depth:3},{text:"2、移动和直线命令",id:"2移动和直线命令",depth:3},{text:"3、弧线命令",id:"3弧线命令",depth:3},{text:"4、贝塞尔曲线命令",id:"4贝塞尔曲线命令",depth:3},{text:"四、SVG 文本",id:"四svg-文本",depth:2},{text:"1、text 和  tspan  创建文本",id:"1text-和--tspan--创建文本",depth:3},{text:"3、a - 插入超链接",id:"3a---插入超链接",depth:3},{text:"五、图形的引用、裁切和蒙蔽",id:"五图形的引用裁切和蒙蔽",depth:2},{text:"1、clip - 裁切图像",id:"1clip---裁切图像",depth:3},{text:"2、mask - 创建蒙板",id:"2mask---创建蒙板",depth:3},{text:"六、SVG 动画",id:"六svg-动画",depth:2},{text:"1、animate",id:"1animate",depth:3},{text:"2、animateTransform",id:"2animatetransform",depth:3},{text:"3、animateMotion",id:"3animatemotion",depth:3}],title:"SVG 深入浅出",frontmatter:{title:"SVG 深入浅出",date:"2022-12-07T18:57:32.000Z"}}}}]);