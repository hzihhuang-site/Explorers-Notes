"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["373"],{9088:function(n,e,s){s.r(e),s.d(e,{default:function(){return l}});var d=s(2676),r=s(453);function c(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",blockquote:"blockquote",ol:"ol",li:"li",p:"p",code:"code",h3:"h3",pre:"pre",hr:"hr",ul:"ul",em:"em",h4:"h4",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",strong:"strong"},(0,r.ah)(),n.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(e.h1,{id:"sass-基础",children:["Sass 基础",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#sass-基础",children:"#"})]}),"\n",(0,d.jsxs)(e.h2,{id:"一注释",children:["一、注释",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#一注释",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsxs)(e.ol,{children:["\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsxs)(e.p,{children:["Sass 支持标准的 CSS 多行注释 ",(0,d.jsx)(e.code,{children:"/* */"}),"，以及单行注释 ",(0,d.jsx)(e.code,{children:"//"}),"，前者会被完整输出到编译后的 CSS 文件中，而后者则不会。"]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsxs)(e.p,{children:["将 ",(0,d.jsx)(e.code,{children:"!"})," 作为多行注释的第一个字符表示在压缩输出模式下保留这条注释并输出到 CSS 文件中，通常用于添加版权信息。"]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:"插值语句 (interpolation) 也可写进多行注释中输出变量值"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.h2,{id:"二变量",children:["二、变量",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#二变量",children:"#"})]}),"\n",(0,d.jsxs)(e.h3,{id:"1定义",children:["1.定义",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1定义",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"变量以美元符号开头，赋值方法与 CSS 属性的写法一样"}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"$width: 1600px;\n$pen-size: 3em;\n"})}),"\n",(0,d.jsxs)(e.h3,{id:"2使用",children:["2.使用",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2使用",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"直接使用变量的名称即可调用变量"}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"#app {\n  height: $width;\n  font-size: $pen-size;\n}\n"})}),"\n",(0,d.jsxs)(e.h3,{id:"3作用域",children:["3.作用域",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3作用域",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsxs)(e.p,{children:["变量支持块级作用域，嵌套规则内定义的变量只能在嵌套规则内使用（局部变量），不在嵌套规则内定义的变量则可在任何地方使用（全局变量）。将局部变量转换为全局变量可以添加 ",(0,d.jsx)(e.code,{children:"!global"})," 声明"]}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"#foo {\n  $width: 5em !global;\n  width: $width;\n}\n\n#bar {\n  width: $width;\n}\n"})}),"\n",(0,d.jsx)(e.p,{children:"编译后："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-css",children:"#foo {\n  width: 5em;\n}\n\n#bar {\n  width: 5em;\n}\n"})}),"\n",(0,d.jsx)(e.hr,{}),"\n",(0,d.jsxs)(e.h2,{id:"三数据类型",children:["三、数据类型",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#三数据类型",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"SassScript 支持 7 种主要的数据类型："}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:["数字，",(0,d.jsx)(e.code,{children:"1, 2, 13, 10px"})]}),"\n",(0,d.jsxs)(e.li,{children:["字符串，有引号字符串与无引号字符串，",(0,d.jsx)(e.code,{children:"\"foo\", 'bar', baz"})]}),"\n",(0,d.jsxs)(e.li,{children:["颜色，",(0,d.jsx)(e.code,{children:"blue, #04a3f9, rgba(255,0,0,0.5)"})]}),"\n",(0,d.jsxs)(e.li,{children:["布尔型，",(0,d.jsx)(e.code,{children:"true, false"})]}),"\n",(0,d.jsxs)(e.li,{children:["空值，",(0,d.jsx)(e.code,{children:"null"})]}),"\n",(0,d.jsxs)(e.li,{children:["数组 (list)，用空格或逗号作分隔符，",(0,d.jsx)(e.code,{children:"1.5em 1em 0 2em, Helvetica, Arial, sans-serif"})]}),"\n",(0,d.jsxs)(e.li,{children:["maps, 相当于 JavaScript 的 object，",(0,d.jsx)(e.code,{children:"(key1: value1, key2: value2)"})]}),"\n"]}),"\n",(0,d.jsxs)(e.p,{children:["SassScript 也支持其他 CSS 属性值，比如 Unicode 字符集，或 ",(0,d.jsx)(e.code,{children:"!important"})," 声明。然而 Sass 不会特殊对待这些属性值，一律视为无引号字符串。"]}),"\n",(0,d.jsxs)(e.p,{children:["判断数据类型的方式：",(0,d.jsx)(e.code,{children:"type-of($value)"})]}),"\n"]}),"\n",(0,d.jsxs)(e.h3,{id:"1字符串-strings",children:["1.字符串 (Strings)",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1字符串-strings",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsxs)(e.p,{children:["SassScript 支持 CSS 的两种字符串类型：",(0,d.jsx)(e.code,{children:"有引号字符串 (quoted strings)"}),"，和",(0,d.jsx)(e.code,{children:"无引号字符串 (unquoted strings)"}),"。"]}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"$name: 'Tom Bob';\n$container: 'top bottom';\n$what: heart;\n\n// 注：在编译 CSS 文件时不会改变其类型。只有一种情况例外，使用 `#{}` (interpolation) 时，有引号字符串将被编译为无引号字符串，这样便于在 mixin 中引用选择器名\n"})}),"\n",(0,d.jsxs)(e.h3,{id:"2数字numbers",children:["2.数字(Numbers)",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2数字numbers",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsxs)(e.p,{children:["SassScript 支持两种数字类型：",(0,d.jsx)(e.code,{children:"带单位数字"}),"和",(0,d.jsx)(e.code,{children:"不带单位数字"}),"。（可正可负可为零，可正可浮点）"]}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"$my-age: 19;\n$your-age: 19.5;\n$height: 120px;\n\n// 注：单位会和数字当做一个整体，进行算数运算\n"})}),"\n",(0,d.jsxs)(e.h3,{id:"3空值null",children:["3.空值(Null)",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3空值null",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsxs)(e.p,{children:["只有一个取值",(0,d.jsx)(e.code,{children:"null"})]}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"$value: null;\n\n// 注：由于它代表空，所以不能够使用它与任何类型进行算数运算\n"})}),"\n",(0,d.jsxs)(e.h3,{id:"4布尔型booleans",children:["4.布尔型(Booleans)",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#4布尔型booleans",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsxs)(e.p,{children:["只有两个取值：",(0,d.jsx)(e.code,{children:"true"}),"和",(0,d.jsx)(e.code,{children:"false"})]}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"$a: true;\n$b: false;\n\n// 注：只有自身是false和null才会返回false，其他一切都将返回true\n"})}),"\n",(0,d.jsxs)(e.h3,{id:"5数组-lists",children:["5.数组 (Lists)",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#5数组-lists",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsxs)(e.p,{children:["通过空格或者逗号分隔的一系列的值。事实上，独立的值也被视为数组 —— 只包含一个值的数组。索引从",(0,d.jsx)(e.code,{children:"1"}),"开始"]}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"$list0: 1px 2px 5px 6px;\n$list1: 1px 2px, 5px 6px;\n$list2: (1px 2px) (5px 6px);\n"})}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsxs)(e.p,{children:["数组中可以包含子数组，比如 ",(0,d.jsx)(e.code,{children:"1px 2px, 5px 6px"})," 是包含 ",(0,d.jsx)(e.code,{children:"1px 2px"})," 与 ",(0,d.jsx)(e.code,{children:"5px 6px"})," 两个数组的数组。如果内外两层数组使用相同的分隔方式，需要用圆括号包裹内层，所以也可以写成 ",(0,d.jsx)(e.code,{children:"(1px 2px) (5px 6px)"}),"。变化是，之前的 ",(0,d.jsx)(e.code,{children:"1px 2px, 5px 6px"})," 使用逗号分割了两个子数组 (comma-separated)，而 ",(0,d.jsx)(e.code,{children:"(1px 2px) (5px 6px)"})," 则使用空格分割(space-separated)。"]}),"\n",(0,d.jsxs)(e.p,{children:["当数组被编译为 CSS 时，Sass 不会添加任何圆括号（CSS 中没有这种写法），所以 ",(0,d.jsx)(e.code,{children:"(1px 2px) (5px 6px)"})," 与 ",(0,d.jsx)(e.code,{children:"1px 2px, 5px 6px"})," 在编译后的 CSS 文件中是完全一样的，但是它们在 Sass 文件中却有不同的意义，前者是包含两个数组的数组，而后者是包含四个值的数组。"]}),"\n",(0,d.jsxs)(e.p,{children:["用 ",(0,d.jsx)(e.code,{children:"()"})," 表示不包含任何值的空数组（在 Sass 3.3 版之后也视为空的 map）。空数组不可以直接编译成 CSS，比如编译 ",(0,d.jsx)(e.code,{children:"font-family: ()"})," Sass 将会报错。如果数组中包含空数组或空值，编译时将被清除，比如 ",(0,d.jsx)(e.code,{children:"1px 2px () 3px"})," 或 ",(0,d.jsx)(e.code,{children:"1px 2px null 3px"}),"。"]}),"\n",(0,d.jsxs)(e.p,{children:["基于逗号分隔的数组允许保留结尾的逗号，这样做的意义是强调数组的结构关系，尤其是需要声明只包含单个值的数组时。例如 ",(0,d.jsx)(e.code,{children:"(1,)"})," 表示只包含 ",(0,d.jsx)(e.code,{children:"1"})," 的数组，而 ",(0,d.jsx)(e.code,{children:"(1 2 3,)"})," 表示包含 ",(0,d.jsx)(e.code,{children:"1 2 3"})," 这个以空格分隔的数组的数组。"]}),"\n"]}),"\n",(0,d.jsxs)(e.h3,{id:"6映射maps",children:["6.映射(Maps)",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#6映射maps",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"Maps 必须被圆括号包围，可以映射任何类型键值对（任何类型，包括内嵌 maps，不过不推荐这种内嵌方式）"}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"$map: (\n  $key1: value1,\n  $key2: value2,\n  $key3: value3\n);\n"})}),"\n",(0,d.jsxs)(e.h3,{id:"7颜色-colors",children:["7.颜色 (Colors)",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#7颜色-colors",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"CSS 原有颜色类型，十六进制、RGB、RGBA、HSL、HSLA 和色彩单词"}),"\n",(0,d.jsx)(e.p,{children:"SCSS 提供了内置 Colors 函数，从而更方便地使用颜色"}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"$color0: green;\n$color1: lighten($color, 15%);\n$color2: darken($color, 15%);\n$color3: saturate($color, 15%);\n$color4: desaturate($color, 15%);\n$color5: (green + red);\n"})}),"\n",(0,d.jsx)(e.hr,{}),"\n",(0,d.jsxs)(e.h2,{id:"四运算",children:["四、运算",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#四运算",children:"#"})]}),"\n",(0,d.jsxs)(e.h3,{id:"1数字运算符",children:["1.数字运算符",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1数字运算符",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsxs)(e.p,{children:["SassScript 支持数字的加减乘除、取整等运算 (",(0,d.jsx)(e.code,{children:"+, -, *, /, %"}),")，如果必要会在不同单位间转换值"]}),"\n",(0,d.jsx)(e.p,{children:"如果要保留运算符号，则应该使用插值语法"}),"\n"]}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.code,{children:"+"})}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"// 纯数字\n$add1: 1 + 2; // 3\n$add2: 1 + 2px; // 3px\n$add3: 1px + 2; // 3px\n$add4: 1px + 2px; //3px\n\n// 纯字符串\n$add5: 'a' + 'b'; // \"ab\"\n$add6: 'a' + b; // \"ab\"\n$add7: a + 'b'; // ab\n$add8: a + b; // ab\n\n// 数字和字符串\n$add9: 1 + a; // 1a\n$adda: a + 1; // a1\n$addb: '1' + a; // \"1a\"\n$addc: 1 + 'a'; // \"1a\"\n$addd: 'a' + 1; // \"a1\"\n$adde: a + '1'; // a1\n$addf: 1 + '1'; // \"11\"\n"})}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"// 总结：\na.纯数字：只要有单位，结果必有单位\nb.纯字符串：第一个字符串有无引号决定结果是否有引号\nc数字和字符串：第一位有引号，结果必为引号；第一位对应数字非数字且最后一位带有引号，则结果必为引号\n"})}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.code,{children:"-"})}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"$add1: 1 - 2; // -1\n$add2: 1 - 2px; // -1px\n$add3: 1px - 2; // -1px\n$add4: 1px - 2px; //-1px\n\n$sub1: a - 1; // a-1\n$sub2: 1 - a; // 1-a\n$sub3: 'a' - 1; // \"a\"-1\n$sub4: a - '1'; // a-\"1\"\n"})}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"// 总结：\n每个字段必须前部分为数字，且两个字段只能一个后部分是字符(因为此时后缀被当被单位看待了)。\n只要其中一个值首位不为数字的，结果就按顺序去除空格后拼接起来\n"})}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.code,{children:"*"})}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"$num1: 1 * 2; // 2\n$mul2: 1 * 2px; // 2px\n$num3: 1px * 2; // 2px\n$num4: 2px * 2px; // 编译不通过\n\n$num5: 1 * 2abc; // 2abc\n"})}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"// 总结：\n每个字段必须前部分为数字，且两个字段只能一个后部分是字符(因为此时后缀被当被单位看待了)。其余编译不通过\n"})}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.code,{children:"/"})}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"// 总结：\na.不会四舍五入，精确到小数点后5位\nb.每个字段必须前部分为数字，且当前者只是单纯数字无单位时，后者(除数)后部分不能有字符。其余结果就按顺序去除空格后拼接起来。\n(因为此时后缀被当被单位看待了)\n"})}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.code,{children:"%"})}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:'// 总结：\na.值与"%"之间必须要有空格，否则会被看做字符串\n'})}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.h3,{id:"2关系运算符",children:["2.关系运算符",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2关系运算符",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsxs)(e.p,{children:["大前提：两端必须为",(0,d.jsx)(e.code,{children:"数字"})," 或 ",(0,d.jsx)(e.code,{children:"前部分数字后部分字符"})]}),"\n",(0,d.jsxs)(e.p,{children:["返回值：",(0,d.jsx)(e.code,{children:"true"})," or ",(0,d.jsx)(e.code,{children:"false"})]}),"\n"]}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.code,{children:">"})}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"$a: 1 > 2; // false\n"})}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.code,{children:"<"})}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"$a: 1 > 2; // true\n"})}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.code,{children:">="})}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"$a: 1 >= 2; // false\n"})}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.code,{children:"<="})}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"$a: 1 <= 2; // true\n"})}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.h3,{id:"3相等运算符",children:["3.相等运算符",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3相等运算符",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsxs)(e.p,{children:["作用范围：相等运算 ",(0,d.jsx)(e.code,{children:"==, !="})," 可用于所有数据类型"]}),"\n",(0,d.jsxs)(e.p,{children:["返回值：",(0,d.jsx)(e.code,{children:"true"})," or ",(0,d.jsx)(e.code,{children:"false"})]}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"$a: 1 == 1px; // true\n$b: 'a' == a; // true\n"})}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"// 总结：\n前部分为不带引号数字时，对比的仅仅是数字部分；反之，忽略引号，要求字符一一对应\n"})}),"\n",(0,d.jsxs)(e.h3,{id:"4布尔运算符",children:["4.布尔运算符",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#4布尔运算符",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsxs)(e.p,{children:["SassScript 支持布尔型的 ",(0,d.jsx)(e.code,{children:"and"})," ",(0,d.jsx)(e.code,{children:"or"})," 以及 ",(0,d.jsx)(e.code,{children:"not"})," 运算。"]}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"$a: 1>0 and 0>=5; // fasle\n"})}),"\n",(0,d.jsxs)(e.h3,{id:"5颜色值运算",children:["5.颜色值运算",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#5颜色值运算",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"颜色值的运算是分段计算进行的，也就是分别计算红色，绿色，以及蓝色的值"}),"\n"]}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.code,{children:"颜色值与颜色值"})}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"p {\n  color: #010203 + #040506;\n}\n\n// 计算 01 + 04 = 05 02 + 05 = 07 03 + 06 = 09，然后编译为\n// p {\n  color: #050709; }\n"})}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.code,{children:"颜色值与数字"})}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"p {\n  color: #010203 * 2;\n}\n\n// 计算 01 * 2 = 02 02 * 2 = 04 03 * 2 = 06，然后编译为\n// p {\n  color: #020406; }\n"})}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.code,{children:"RGB和HSL"})}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"// 如果颜色值包含 alpha channel（rgba 或 hsla 两种颜色值），必须拥有相等的 alpha 值才能进行运算，因为算术运算不会作用于 alpha 值。\n\np {\n  color: rgba(255, 0, 0, 0.75) + rgba(0, 255, 0, 0.75);\n}\n\n// p {\n  color: rgba(255, 255, 0, 0.75); }\n"})}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.h3,{id:"6运算优先级",children:["6.运算优先级",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#6运算优先级",children:"#"})]}),"\n",(0,d.jsxs)(e.ol,{start:"0",children:["\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.code,{children:"()"})}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.code,{children:"*"}),"、",(0,d.jsx)(e.code,{children:"/"}),"、",(0,d.jsx)(e.code,{children:"%"})]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.code,{children:"+"}),"、",(0,d.jsx)(e.code,{children:"-"})]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.code,{children:">"})," 、",(0,d.jsx)(e.code,{children:"<"}),"、",(0,d.jsx)(e.code,{children:">="}),"、",(0,d.jsx)(e.code,{children:"<="})]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(e.hr,{}),"\n",(0,d.jsxs)(e.h2,{id:"五嵌套语法",children:["五、嵌套语法",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#五嵌套语法",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"此部分过于简单不计入笔记"}),"\n"]}),"\n",(0,d.jsx)(e.hr,{}),"\n",(0,d.jsxs)(e.h2,{id:"六杂货语法",children:["六、杂货语法",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#六杂货语法",children:"#"})]}),"\n",(0,d.jsxs)(e.h3,{id:"1插值语法",children:["1.",(0,d.jsx)(e.code,{children:"插值语法"}),(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1插值语法",children:"#"})]}),"\n",(0,d.jsxs)(e.p,{children:["通过 ",(0,d.jsx)(e.code,{children:"#{}"})," 插值语句可以在选择器、属性名和属性值中使用变量。"]}),"\n",(0,d.jsxs)(e.p,{children:["但大多数情况下，这样使用属性值可能还不如直接使用变量方便，但是使用 ",(0,d.jsx)(e.code,{children:"#{}"})," 可以避免 Sass 运行运算表达式，直接编译 CSS。"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"$name: foo;\n$attr: border;\np.#{$name} {\n  #{$attr}-color: $name;\n}\n\n// 编译后：\np.foo {\n  border-color: foo;\n}\n"})}),"\n",(0,d.jsxs)(e.h3,{id:"2-in-sassscript",children:["2.",(0,d.jsx)(e.code,{children:"& in SassScript"}),(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2-in-sassscript",children:"#"})]}),"\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.code,{children:"&"}),"为父选择器"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"a {\n  color: yellow;\n  &:hover {\n    color: green;\n  }\n  &:active {\n    color: blank;\n  }\n}\n"})}),"\n",(0,d.jsxs)(e.h3,{id:"3default",children:["3.",(0,d.jsx)(e.code,{children:"!default"}),(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3default",children:"#"})]}),"\n",(0,d.jsxs)(e.p,{children:["可以在变量的结尾添加 ",(0,d.jsx)(e.code,{children:"!default"})," 给一个未通过 ",(0,d.jsx)(e.code,{children:"!default"})," 声明赋值的变量赋值，此时，如果变量已经被赋值，不会再被重新赋值，但是如果变量还没有被赋值，则会被赋予新的值。"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"$content: 'First content';\n$content: 'Second content?' !default;\n$new_content: 'First time reference' !default;\n\n#main {\n  content: $content;\n  new-content: $new_content;\n}\n\n// 编译为：\n#main {\n  content: 'First content';\n  new-content: 'First time reference';\n}\n"})}),"\n",(0,d.jsxs)(e.p,{children:["注意：变量是 null 空值时将视为未被 ",(0,d.jsx)(e.code,{children:"!default"})," 赋值。"]}),"\n",(0,d.jsxs)(e.h3,{id:"3global",children:["3.",(0,d.jsx)(e.code,{children:"!global"}),(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3global",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"将局部变量提升为全局变量"}),"\n",(0,d.jsxs)(e.h3,{id:"4optional",children:["4.",(0,d.jsx)(e.code,{children:"!optional"}),(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#4optional",children:"#"})]}),"\n",(0,d.jsxs)(e.p,{children:["如果 ",(0,d.jsx)(e.code,{children:"@extend"})," 失败会收到错误提示，比如，这样写 ",(0,d.jsx)(e.code,{children:"a.important {@extend .notice}"}),"，当没有 ",(0,d.jsx)(e.code,{children:".notice"})," 选择器时，将会报错，只有 ",(0,d.jsx)(e.code,{children:"h1.notice"})," 包含 ",(0,d.jsx)(e.code,{children:".notice"})," 时也会报错，因为 ",(0,d.jsx)(e.code,{children:"h1"})," 与 ",(0,d.jsx)(e.code,{children:"a"})," 冲突，会生成新的选择器。"]}),"\n",(0,d.jsxs)(e.p,{children:["如果要求 ",(0,d.jsx)(e.code,{children:"@extend"})," 不生成新选择器，可以通过 ",(0,d.jsx)(e.code,{children:"!optional"})," 声明达到这个目的."]}),"\n",(0,d.jsxs)(e.p,{children:["简而言之：当",(0,d.jsx)(e.code,{children:"@extend"}),'相关代码出现语法错误时，编译器可能会给我们"乱"编译为 css，我们加上这个参数可以在出现问题后不让他编译该部分代码']}),"\n",(0,d.jsx)(e.hr,{}),"\n",(0,d.jsxs)(e.h2,{id:"七-rules-与指令",children:["七、@-Rules 与指令",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#七-rules-与指令",children:"#"})]}),"\n",(0,d.jsxs)(e.h3,{id:"1import",children:["1.",(0,d.jsx)(e.code,{children:"@import"}),(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1import",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsxs)(e.p,{children:["Sass 拓展了 ",(0,d.jsx)(e.code,{children:"@import"})," 的功能，允许其导入 SCSS 或 SASS 文件。被导入的文件将合并编译到同一个 CSS 文件中，另外，被导入的文件中所包含的变量或者混合指令 (mixin) 都可以在导入的文件中使用。"]}),"\n",(0,d.jsxs)(e.p,{children:["通常，",(0,d.jsx)(e.code,{children:"@import"})," 寻找 Sass 文件并将其导入，但在以下情况下，",(0,d.jsx)(e.code,{children:"@import"})," 仅作为普通的 CSS 语句，不会导入任何 Sass 文件。"]}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:["文件拓展名是 ",(0,d.jsx)(e.code,{children:".css"}),"；"]}),"\n",(0,d.jsxs)(e.li,{children:["文件名以 ",(0,d.jsx)(e.code,{children:"http://"})," 开头；"]}),"\n",(0,d.jsxs)(e.li,{children:["文件名是 ",(0,d.jsx)(e.code,{children:"url()"}),"；"]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"@import"})," 包含 media queries。"]}),"\n"]}),"\n",(0,d.jsxs)(e.p,{children:["如果不在上述情况内，文件的拓展名是 ",(0,d.jsx)(e.code,{children:".scss"})," 或 ",(0,d.jsx)(e.code,{children:".sass"}),"，则导入成功。没有指定拓展名，Sass 将会试着寻找文件名相同，拓展名为 ",(0,d.jsx)(e.code,{children:".scss"})," 或 ",(0,d.jsx)(e.code,{children:".sass"})," 的文件并将其导入。"]}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"@import 'foo.scss';\n@import 'foo';\n// 以上两种方式均可\n\n// 以下方式均不可行\n@import 'foo.css';\n@import 'foo' screen;\n@import 'http://foo.com/bar';\n@import url(foo);\n"})}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"Sass 允许同时导入多个文件，例如同时导入 rounded-corners 与 text-shadow 两个文件："}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"@import 'rounded-corners', 'text-shadow';\n"})}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsxs)(e.p,{children:["导入文件也可以使用 ",(0,d.jsx)(e.code,{children:"#{ }"})," 插值语句，但不是通过变量动态导入 Sass 文件，只能作用于 CSS 的 ",(0,d.jsx)(e.code,{children:"url()"})," 导入方式："]}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"$family: unquote('Droid+Sans');\n@import url('http://fonts.googleapis.com/css?family=\\#{$family}');\n\n// 编译为：\n@import url('http://fonts.googleapis.com/css?family=Droid+Sans');\n"})}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"如果你有一个 SCSS 或 Sass 文件需要引入， 但是你又不希望它被编译为一个 CSS 文件， 这时，你就可以在文件名前面加一个下划线，就能避免被编译。 这将告诉 Sass 不要把它编译成 CSS 文件。 然后，你就可以像往常一样引入这个文件了，而且还可以省略掉文件名前面的下划线。"}),"\n",(0,d.jsxs)(e.p,{children:["除此之外，还支持嵌套 @import,但是不可以在混合指令 (mixin) 或控制指令 (control directives) 中嵌套 ",(0,d.jsx)(e.code,{children:"@import"}),"。"]}),"\n"]}),"\n",(0,d.jsxs)(e.h3,{id:"2media",children:["2.",(0,d.jsx)(e.code,{children:"@media"}),(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2media",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsxs)(e.p,{children:["Sass 中 ",(0,d.jsx)(e.code,{children:"@media"})," 指令与 CSS 中用法一样，只是增加了一点额外的功能：允许其在 CSS 规则中嵌套。如果 ",(0,d.jsx)(e.code,{children:"@media"})," 嵌套在 CSS 规则内，编译时，",(0,d.jsx)(e.code,{children:"@media"})," 将被编译到文件的最外层，包含嵌套的父选择器。这个功能让 ",(0,d.jsx)(e.code,{children:"@media"})," 用起来更方便，不需要重复使用选择器，也不会打乱 CSS 的书写流程。"]}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:".sidebar {\n  width: 300px;\n  @media screen and (orientation: landscape) {\n    width: 500px;\n  }\n}\n// 编译为\n.sidebar {\n  width: 300px;\n  @media screen and (orientation: landscape) {\n    width: 500px;\n  }\n}\n"})}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.code,{children:"@media"}),"的 queries 允许互相嵌套使用，编译时，Sass 自动添加 ",(0,d.jsx)(e.code,{children:"and"})]}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"@media screen {\n  .sidebar {\n    @media (orientation: landscape) {\n      width: 500px;\n    }\n  }\n}\n// 编译为：\n@media screen and (orientation: landscape) {\n  .sidebar {\n    width: 500px;\n  }\n}\n"})}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.code,{children:"@media"})," 甚至可以使用 SassScript（比如变量，函数，以及运算符）代替条件的名称或者值"]}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"$media: screen;\n$feature: -webkit-min-device-pixel-ratio;\n$value: 1.5;\n\n@media #{$media} and ($feature: $value) {\n  .sidebar {\n    width: 500px;\n  }\n}\n// 编译为：\n@media screen and (-webkit-min-device-pixel-ratio: 1.5) {\n  .sidebar {\n    width: 500px;\n  }\n}\n"})}),"\n",(0,d.jsxs)(e.h3,{id:"3extend",children:["3.",(0,d.jsx)(e.code,{children:"@extend"}),(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3extend",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.code,{children:"@extend"}),"即",(0,d.jsx)(e.code,{children:"继承"}),"。在设计网页的时候常常遇到这种情况：一个元素使用的样式与另一个元素完全相同，但又添加了额外的样式。"]}),"\n"]}),"\n",(0,d.jsx)(e.hr,{}),"\n",(0,d.jsxs)(e.h2,{id:"八控制指令",children:["八、控制指令",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#八控制指令",children:"#"})]}),"\n",(0,d.jsxs)(e.h3,{id:"1if",children:["1.",(0,d.jsx)(e.code,{children:"if()"}),(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1if",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.em,{children:"三元运算符"})}),"\n",(0,d.jsxs)(e.p,{children:["表达式：",(0,d.jsx)(e.code,{children:"if(expression, value1, value2)"})]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"p {\n  color: if(1 + 1 = 2, green, yellow);\n}\n\n// compile:\np {\n  color: green;\n}\n"})}),"\n",(0,d.jsxs)(e.h3,{id:"2if",children:["2.",(0,d.jsx)(e.code,{children:"@if"}),(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2if",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.em,{children:"条件语句"})}),"\n",(0,d.jsxs)(e.p,{children:["当 ",(0,d.jsx)(e.code,{children:"@if"})," 的表达式返回值不是 ",(0,d.jsx)(e.code,{children:"false"})," 或者 ",(0,d.jsx)(e.code,{children:"null"})," 时，条件成立，输出 ",(0,d.jsx)(e.code,{children:"{}"})," 内的代码"]}),"\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.code,{children:"@if"})," 声明后面可以跟多个 ",(0,d.jsx)(e.code,{children:"@else if"})," 声明，或者一个 ",(0,d.jsx)(e.code,{children:"@else"})," 声明。如果 ",(0,d.jsx)(e.code,{children:"@if"})," 声明失败，Sass 将逐条执行 ",(0,d.jsx)(e.code,{children:"@else if"})," 声明，如果全部失败，最后执行 ",(0,d.jsx)(e.code,{children:"@else"})," 声明"]}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.code,{children:"单@if"})}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"p {\n  @if 1 + 1 == 2 {\n    color: red;\n  }\n}\n\n// compile:\np {\n  color: red;\n}\n"})}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.code,{children:"@if - @else"})}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"p {\n  @if 1 + 1 != 2 {\n    color: red;\n  } @else {\n    color: blue;\n  }\n}\n\n// compile:\np {\n  color: blue;\n}\n"})}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.code,{children:"@if - @else if - @else"})}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"$age: 19;\n\np {\n  @if $age == 18 {\n    color: red;\n  } @else if $age == 19 {\n    color: blue;\n  } @else {\n    color: green;\n  }\n}\n\n// compile:\np {\n  color: blue;\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.h3,{id:"3for",children:["3.",(0,d.jsx)(e.code,{children:"@for"}),(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3for",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.em,{children:"循环语句"})}),"\n",(0,d.jsxs)(e.p,{children:["表达式：",(0,d.jsx)(e.code,{children:"@for $var from <start> through <end>"})," 或 ",(0,d.jsx)(e.code,{children:"@for $var from <start> to <end>"})]}),"\n",(0,d.jsx)(e.p,{children:"through 和 to 的相同点与不同点："}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:["相同点：两者均包含",(0,d.jsx)(e.code,{children:"<start>"}),"的值"]}),"\n",(0,d.jsxs)(e.li,{children:["不同点：through 包含",(0,d.jsx)(e.code,{children:"<end>"}),"的值，但 to 不包含",(0,d.jsx)(e.code,{children:"<end>"}),"的值"]}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"@for $i from 1 through 3 {\n  .item-#{$i} {\n    width: 2em * $i;\n  }\n}\n\n// compile:\n.item-1 {\n  width: 2em;\n}\n.item-2 {\n  width: 4em;\n}\n.item-3 {\n  width: 6em;\n}\n"})}),"\n",(0,d.jsxs)(e.h3,{id:"4while",children:["4.",(0,d.jsx)(e.code,{children:"@while"}),(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#4while",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.em,{children:"循环语句"})}),"\n",(0,d.jsxs)(e.p,{children:["表达式：",(0,d.jsx)(e.code,{children:"@while expression"})]}),"\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.code,{children:"@while"})," 指令重复输出格式直到表达式返回结果为 ",(0,d.jsx)(e.code,{children:"false"}),"。这样可以实现比 ",(0,d.jsx)(e.code,{children:"@for"})," 更复杂的循环，只是很少会用到"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"$i: 6;\n@while $i > 0 {\n  .item-#{$i} {\n    width: 2em * $i;\n  }\n  $i: $i - 2;\n}\n\n// compile:\n.item-6 {\n  width: 12em;\n}\n.item-4 {\n  width: 8em;\n}\n.item-2 {\n  width: 4em;\n}\n"})}),"\n",(0,d.jsxs)(e.h3,{id:"5each",children:["5.",(0,d.jsx)(e.code,{children:"@each"}),(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#5each",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.em,{children:"循环语句"})}),"\n",(0,d.jsxs)(e.p,{children:["表达式：",(0,d.jsx)(e.code,{children:"$var in $vars"})]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"@each $header, $size in (h1: 2em, h2: 1.5em, h3: 1.2em) {\n  #{$header} {\n    font-size: $size;\n  }\n}\n\n// compile:\nh1 {\n  font-size: 2em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.2em;\n}\n"})}),"\n",(0,d.jsx)(e.hr,{}),"\n",(0,d.jsxs)(e.h2,{id:"九混合指令",children:["九、混合指令",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#九混合指令",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsxs)(e.p,{children:["混合指令（Mixin）用于定义可重复使用的样式，避免了使用无语意的 class，比如 ",(0,d.jsx)(e.code,{children:".float-left"}),"。混合指令可以包含所有的 CSS 规则，绝大部分 Sass 规则，甚至通过参数功能引入变量，输出多样化的样式。"]}),"\n"]}),"\n",(0,d.jsx)(e.p,{children:"注意：这不是函数！没有返回值！！"}),"\n",(0,d.jsxs)(e.h3,{id:"1定义混合指令",children:["1.定义混合指令",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1定义混合指令",children:"#"})]}),"\n",(0,d.jsxs)(e.p,{children:["混合指令的用法是在 ",(0,d.jsx)(e.code,{children:"@mixin"})," 后添加名称与样式，以及需要的参数（可选）。"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"// 格式：\n@mixin name {\n  // 样式....\n}\n"})}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"// example：\n@mixin large-text {\n  font: {\n    family: Arial;\n    size: 20px;\n    weight: bold;\n  }\n  color: #ff0000;\n}\n"})}),"\n",(0,d.jsxs)(e.h3,{id:"2引用混合样式",children:["2.引用混合样式",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2引用混合样式",children:"#"})]}),"\n",(0,d.jsxs)(e.p,{children:["使用 ",(0,d.jsx)(e.code,{children:"@include"})," 指令引用混合样式，格式是在其后添加混合名称，以及需要的参数（可选）。"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"// 格式：\n@include name;\n\n// 注：无参数或参数都有默认值时，带不带括号都可以\n"})}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"// example：\np {\n  @include large-text;\n}\n\n// compile:\np {\n  font-family: Arial;\n  font-size: 20px;\n  font-weight: bold;\n  color: #ff0000;\n}\n"})}),"\n",(0,d.jsxs)(e.h3,{id:"3参数",children:["3.参数",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3参数",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"格式：按照变量的格式，通过逗号分隔，将参数写进 Mixin 名称后的圆括号里"}),"\n",(0,d.jsx)(e.p,{children:"支持默认值；支持多参数；支持不定参数；支持位置传参和关键词传参"}),"\n",(0,d.jsxs)(e.h4,{id:"a-位置传参",children:["a. 位置传参",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#a-位置传参",children:"#"})]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"@mixin mp($width) {\n  margin: $width;\n}\n\nbody {\n  @include mp(300px);\n}\n"})}),"\n",(0,d.jsxs)(e.h4,{id:"b关键词传参",children:["b.关键词传参",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#b关键词传参",children:"#"})]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"@mixin mp($width) {\n  margin: $width;\n}\n\nbody {\n  @include mp($width: 300px);\n}\n"})}),"\n",(0,d.jsxs)(e.h4,{id:"c参数默认值",children:["c.参数默认值",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#c参数默认值",children:"#"})]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"@mixin mp($width: 500px) {\n  margin: $width;\n}\n\nbody {\n  @include mp($width: 300px);\n  // or\n  @include mp(300px);\n}\n"})}),"\n",(0,d.jsxs)(e.h4,{id:"d不定参数",children:["d.不定参数",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#d不定参数",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"官方：Variable Arguments"}),"\n",(0,d.jsx)(e.p,{children:"译文：参数变量"}),"\n",(0,d.jsxs)(e.p,{children:["有时，不能确定混合指令需要使用多少个参数。这时，可以使用参数变量 ",(0,d.jsx)(e.code,{children:"…"})," 声明（写在参数的最后方）告诉 Sass 将这些参数视为值列表处理"]}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"@mixin mar($value...) {\n  margin: $value;\n}\n"})}),"\n",(0,d.jsxs)(e.h3,{id:"4向混合样式中导入内容",children:["4.向混合样式中导入内容",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#4向混合样式中导入内容",children:"#"})]}),"\n",(0,d.jsxs)(e.p,{children:["在引用混合样式的时候，可以先将一段代码导入到混合指令中，然后再输出混合样式，额外导入的部分将出现在 ",(0,d.jsx)(e.code,{children:"@content"})," 标志的地方（ 少用，逻辑容易混乱 ）"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"@mixin example {\n  html {\n    @content;\n  }\n}\n@include example {\n  background-color: red;\n  .logo {\n    width: 600px;\n  }\n}\n\n// compile:\nhtml {\n  background-color: red;\n}\n\nhtml .logo {\n  width: 600px;\n}\n"})}),"\n",(0,d.jsx)(e.hr,{}),"\n",(0,d.jsxs)(e.h2,{id:"十函数指令",children:["十、函数指令",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#十函数指令",children:"#"})]}),"\n",(0,d.jsxs)(e.h3,{id:"1内置函数",children:["1.内置函数",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1内置函数",children:"#"})]}),"\n",(0,d.jsxs)(e.h4,{id:"a-字符串函数",children:["a. 字符串函数",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#a-字符串函数",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"索引第一个为 1，最后一个为-1；切片两边均为闭区间"}),"\n"]}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{align:"left",children:"函数名和参数类型"}),"\n",(0,d.jsx)(e.th,{align:"center",children:"函数作用"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{align:"left",children:"quote($string)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"添加引号"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{align:"left",children:"unquote($string)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"除去引号"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{align:"left",children:"to-lower-case($string)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"变为小写"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{align:"left",children:"to-upper-case($string)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"变为大写"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{align:"left",children:"str-length($string)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"返回$string 的长度(汉字算一个)"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{align:"left",children:"str-index($string，$substring)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"返回$substring在$string 的位置"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{align:"left",children:"str-insert($string, $insert, $index)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"在$string的$index 处插入$insert"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{align:"left",children:"str-slice($string, $start-at, $end-at）"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"截取$string的$start-at 和$end-at 之间的字符串"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.h4,{id:"b-数字函数",children:["b. 数字函数",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#b-数字函数",children:"#"})]}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{children:"函数名和参数类型"}),"\n",(0,d.jsx)(e.th,{align:"center",children:"函数作用"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"percentage($number)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"转换为百分比形式"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"round($number)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"四舍五入为整数"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"ceil($number)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"数值向上取整"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"floor($number)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"数值向下取整"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"abs($number)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"获取绝对值"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"min($number...)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"获取最小值"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"max($number...)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"获取最大值"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"random($number?:number)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"不传入值：获得 0-1 的随机数；传入正整数 n：获得 0-n 的随机整数（左开右闭）"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.h4,{id:"c-数组函数",children:["c. 数组函数",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#c-数组函数",children:"#"})]}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{children:"函数名和参数类型"}),"\n",(0,d.jsx)(e.th,{align:"center",children:"函数作用"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"length($list)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"获取数组长度"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"nth($list, n)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"获取指定下标的元素"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"set-nth($list, $n, $value)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"向$list的$n 处插入$value"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"join($list1, $list2, $separator)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"拼接$list1和list2；$separator 为新 list 的分隔符，默认为 auto，可选择 comma、space"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"append($list, $val, $separator)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"向$list的末尾添加$val；$separator 为新 list 的分隔符，默认为 auto，可选择 comma、space"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"index($list, $value)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"返回$value值在$list 中的索引值"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"zip($lists…)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"将几个列表结合成一个多维的列表；要求每个的列表个数值必须是相同的"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.h4,{id:"d-映射函数",children:["d. 映射函数",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#d-映射函数",children:"#"})]}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{children:"函数名和参数类型"}),"\n",(0,d.jsx)(e.th,{align:"center",children:"函数作用"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"map-get($map, $key)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"获取$map中$key 对应的$value"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"map-merge($map1, $map2)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"合并$map1和$map2，返回一个新$map"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"map-remove($map, $key)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"从$map中删除$key，返回一个新$map"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"map-keys($map)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"返回$map所有的$key"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"map-values($map)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"返回$map所有的$value"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"map-has-key($map, $key)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"判断$map中是否存在$key，返回对应的布尔值"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"keywords($args)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"返回一个函数的参数，并可以动态修改其值"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.h4,{id:"e-颜色函数",children:["e. 颜色函数",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#e-颜色函数",children:"#"})]}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"RGB 函数"})}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{children:"函数名和参数类型"}),"\n",(0,d.jsx)(e.th,{align:"center",children:"函数作用"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"rgb($red, $green, $blue)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"返回一个 16 进制颜色值"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"rgba($red,$green,$blue,$alpha)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"返回一个 rgba；$red,$green 和$blue 可被当作一个整体以颜色单词、hsl、rgb 或 16 进制形式传入"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"red($color)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"从$color 中获取其中红色值"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"green($color)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"从$color 中获取其中绿色值"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"blue($color)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"从$color 中获取其中蓝色值"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"mix($color1,$color2,$weight?)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"按照$weight比例，将$color1 和$color2 混合为一个新颜色"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"HSL 函数"})}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{children:"函数名和参数类型"}),"\n",(0,d.jsx)(e.th,{children:"函数作用"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"hsl($hue,$saturation,$lightness)"}),"\n",(0,d.jsx)(e.td,{children:"通过色相（hue）、饱和度(saturation)和亮度（lightness）的值创建一个颜色"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"hsla($hue,$saturation,$lightness,$alpha)"}),"\n",(0,d.jsx)(e.td,{children:"通过色相（hue）、饱和度(saturation)、亮度（lightness）和透明（alpha）的值创建一个颜色"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"saturation($color)"}),"\n",(0,d.jsx)(e.td,{children:"从一个颜色中获取饱和度（saturation）值"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"lightness($color)"}),"\n",(0,d.jsx)(e.td,{children:"从一个颜色中获取亮度（lightness）值"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"adjust-hue($color,$degrees)"}),"\n",(0,d.jsx)(e.td,{children:"通过改变一个颜色的色相值，创建一个新的颜色"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"lighten($color,$amount)"}),"\n",(0,d.jsx)(e.td,{children:"通过改变颜色的亮度值，让颜色变亮，创建一个新的颜色"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"darken($color,$amount)"}),"\n",(0,d.jsx)(e.td,{children:"通过改变颜色的亮度值，让颜色变暗，创建一个新的颜色"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"hue($color)"}),"\n",(0,d.jsx)(e.td,{children:"从一个颜色中获取亮度色相（hue）值"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"Opacity 函数"})}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{}),"\n",(0,d.jsx)(e.th,{}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"alpha($color)/opacity($color)"}),"\n",(0,d.jsx)(e.td,{children:"获取颜色透明度值"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"rgba($color,$alpha)"}),"\n",(0,d.jsx)(e.td,{children:"改变颜色的透明度"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"opacify($color, $amount) / fade-in($color, $amount)"}),"\n",(0,d.jsx)(e.td,{children:"使颜色更不透明"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"transparentize($color, $amount) / fade-out($color, $amount)"}),"\n",(0,d.jsx)(e.td,{children:"使颜色更加透明"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.h4,{id:"f-introspection-函数",children:["f. Introspection 函数",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#f-introspection-函数",children:"#"})]}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{children:"函数名和参数类型"}),"\n",(0,d.jsx)(e.th,{align:"center",children:"函数作用"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"type-of($value)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"返回$value 的类型"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"unit($number)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"返回$number 的单位"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"unitless($number)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"判断$number 是否带单位，返回对应的布尔值"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"comparable($number1, $number2)"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"判断$number1和$number2 是否可以做加、减和合并，返回对应的布尔值"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.h3,{id:"2自定义函数",children:["2.自定义函数",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2自定义函数",children:"#"})]}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"Sass 支持自定义函数，并能在任何属性值或 Sass script 中使用"}),"\n",(0,d.jsx)(e.p,{children:"Params: 与 Mixin 一致"}),"\n",(0,d.jsx)(e.p,{children:"支持返回值"}),"\n"]}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"基本格式："})}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"@function fn-name($params...) {\n  @return $params;\n}\n"})}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-scss",children:"// example:\n@function fn-name($params...) {\n  @return nth($params, 1);\n}\np {\n  height: fn-name(1px);\n}\n\n// compiled:\np {\n  height: 1px;\n}\n"})})]})}function i(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,d.jsx)(e,{...n,children:(0,d.jsx)(c,{...n})}):c(n)}let l=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["frontEnd%2Fsass%2Fbase.md"]={toc:[{text:"一、注释",id:"一注释",depth:2},{text:"二、变量",id:"二变量",depth:2},{text:"1.定义",id:"1定义",depth:3},{text:"2.使用",id:"2使用",depth:3},{text:"3.作用域",id:"3作用域",depth:3},{text:"三、数据类型",id:"三数据类型",depth:2},{text:"1.字符串 (Strings)",id:"1字符串-strings",depth:3},{text:"2.数字(Numbers)",id:"2数字numbers",depth:3},{text:"3.空值(Null)",id:"3空值null",depth:3},{text:"4.布尔型(Booleans)",id:"4布尔型booleans",depth:3},{text:"5.数组 (Lists)",id:"5数组-lists",depth:3},{text:"6.映射(Maps)",id:"6映射maps",depth:3},{text:"7.颜色 (Colors)",id:"7颜色-colors",depth:3},{text:"四、运算",id:"四运算",depth:2},{text:"1.数字运算符",id:"1数字运算符",depth:3},{text:"2.关系运算符",id:"2关系运算符",depth:3},{text:"3.相等运算符",id:"3相等运算符",depth:3},{text:"4.布尔运算符",id:"4布尔运算符",depth:3},{text:"5.颜色值运算",id:"5颜色值运算",depth:3},{text:"6.运算优先级",id:"6运算优先级",depth:3},{text:"五、嵌套语法",id:"五嵌套语法",depth:2},{text:"六、杂货语法",id:"六杂货语法",depth:2},{text:"1.`插值语法`",id:"1插值语法",depth:3},{text:"2.`& in SassScript`",id:"2-in-sassscript",depth:3},{text:"3.`!default`",id:"3default",depth:3},{text:"3.`!global`",id:"3global",depth:3},{text:"4.`!optional`",id:"4optional",depth:3},{text:"七、@-Rules 与指令",id:"七-rules-与指令",depth:2},{text:"1.`@import`",id:"1import",depth:3},{text:"2.`@media`",id:"2media",depth:3},{text:"3.`@extend`",id:"3extend",depth:3},{text:"八、控制指令",id:"八控制指令",depth:2},{text:"1.`if()`",id:"1if",depth:3},{text:"2.`@if`",id:"2if",depth:3},{text:"3.`@for`",id:"3for",depth:3},{text:"4.`@while`",id:"4while",depth:3},{text:"5.`@each`",id:"5each",depth:3},{text:"九、混合指令",id:"九混合指令",depth:2},{text:"1.定义混合指令",id:"1定义混合指令",depth:3},{text:"2.引用混合样式",id:"2引用混合样式",depth:3},{text:"3.参数",id:"3参数",depth:3},{text:"a. 位置传参",id:"a-位置传参",depth:4},{text:"b.关键词传参",id:"b关键词传参",depth:4},{text:"c.参数默认值",id:"c参数默认值",depth:4},{text:"d.不定参数",id:"d不定参数",depth:4},{text:"4.向混合样式中导入内容",id:"4向混合样式中导入内容",depth:3},{text:"十、函数指令",id:"十函数指令",depth:2},{text:"1.内置函数",id:"1内置函数",depth:3},{text:"a. 字符串函数",id:"a-字符串函数",depth:4},{text:"b. 数字函数",id:"b-数字函数",depth:4},{text:"c. 数组函数",id:"c-数组函数",depth:4},{text:"d. 映射函数",id:"d-映射函数",depth:4},{text:"e. 颜色函数",id:"e-颜色函数",depth:4},{text:"f. Introspection 函数",id:"f-introspection-函数",depth:4},{text:"2.自定义函数",id:"2自定义函数",depth:3}],title:"Sass 基础",frontmatter:{title:"Sass 基础",date:"2022-03-16T08:00:47.000Z"}}}}]);