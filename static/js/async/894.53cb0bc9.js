"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["894"],{4381:function(n,e,r){r.r(e),r.d(e,{default:function(){return l}});var s=r(2676),i=r(453);function c(n){let e=Object.assign({blockquote:"blockquote",p:"p",a:"a",h1:"h1",h2:"h2",h3:"h3",code:"code",pre:"pre",h4:"h4",strong:"strong",ul:"ul",li:"li"},(0,i.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["阮一峰更新了 ",(0,s.jsx)(e.a,{href:"https://wangdoc.com/typescript/intro",target:"_blank",rel:"noopener noreferrer",children:"TypeScript"})," 的教程，内容更全易懂"]}),"\n"]}),"\n",(0,s.jsxs)(e.h1,{id:"typescript-基础",children:["TypeScript 基础",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#typescript-基础",children:"#"})]}),"\n",(0,s.jsxs)(e.h2,{id:"一数据类型",children:["一、数据类型。",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#一数据类型",children:"#"})]}),"\n",(0,s.jsxs)(e.h3,{id:"1布尔值",children:["1、布尔值",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1布尔值",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["布尔值是最基础的数据类型，在 TypeScript 中，使用 ",(0,s.jsx)(e.code,{children:"boolean"})," 定义布尔值类型："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"let isDone: boolean = false;\n\n// 编译通过\n// 后面约定，未强调编译错误的代码片段，默认为编译通过\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"2数值",children:["2、数值",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2数值",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["使用 ",(0,s.jsx)(e.code,{children:"number"})," 定义数值类型："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"let decLiteral: number = 6;\nlet hexLiteral: number = 0xf00d;\n// ES6 中的二进制表示法\nlet binaryLiteral: number = 0b1010;\n// ES6 中的八进制表示法\nlet octalLiteral: number = 0o744;\nlet notANumber: number = NaN;\nlet infinityNumber: number = Infinity;\n"})}),"\n",(0,s.jsx)(e.p,{children:"编译结果："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"var decLiteral = 6;\nvar hexLiteral = 0xf00d;\n// ES6 中的二进制表示法\nvar binaryLiteral = 10;\n// ES6 中的八进制表示法\nvar octalLiteral = 484;\nvar notANumber = NaN;\nvar infinityNumber = Infinity;\n"})}),"\n",(0,s.jsxs)(e.p,{children:["其中 ",(0,s.jsx)(e.code,{children:"0b1010"})," 和 ",(0,s.jsx)(e.code,{children:"0o744"})," 是 ",(0,s.jsx)(e.a,{href:"http://es6.ruanyifeng.com/#docs/number#%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%92%8C%E5%85%AB%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E6%B3%95",target:"_blank",rel:"noopener noreferrer",children:"ES6 中的二进制和八进制表示法"}),"，它们会被编译为十进制数字。"]}),"\n",(0,s.jsxs)(e.h3,{id:"3字符串",children:["3、字符串",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3字符串",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["使用 ",(0,s.jsx)(e.code,{children:"string"})," 定义字符串类型："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"let myName: string = 'Tom';\nlet myAge: number = 25;\n\n// 模板字符串\nlet sentence: string = `Hello, my name is ${myName}.\nI'll be ${myAge + 1} years old next month.`;\n"})}),"\n",(0,s.jsx)(e.p,{children:"编译结果："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:'var myName = \'Tom\';\nvar myAge = 25;\n// 模板字符串\nvar sentence = "Hello, my name is " + myName + ".\nI\'ll be " + (myAge + 1) + " years old next month.";\n'})}),"\n",(0,s.jsxs)(e.p,{children:["其中 ``` 用来定义 ",(0,s.jsx)(e.a,{href:"http://es6.ruanyifeng.com/#docs/string#%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2",target:"_blank",rel:"noopener noreferrer",children:"ES6 中的模板字符串"}),"，",(0,s.jsx)(e.code,{children:"${expr}"})," 用来在模板字符串中嵌入表达式。"]}),"\n",(0,s.jsxs)(e.h3,{id:"4空值",children:["4、空值",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#4空值",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["JavaScript 没有空值（Void）的概念，在 TypeScript 中，可以用 ",(0,s.jsx)(e.code,{children:"void"})," 表示没有任何返回值的函数："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"function alertName(): void {\n    alert('My name is Tom');\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["声明一个 ",(0,s.jsx)(e.code,{children:"void"})," 类型的变量没有什么用，因为你只能将它赋值为 ",(0,s.jsx)(e.code,{children:"undefined"})," 和 ",(0,s.jsx)(e.code,{children:"null"}),"："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"let unusable: void = undefined;\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"5null-和-undefined",children:["5、Null 和 Undefined",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#5null-和-undefined",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["在 TypeScript 中，可以使用 ",(0,s.jsx)(e.code,{children:"null"})," 和 ",(0,s.jsx)(e.code,{children:"undefined"})," 来定义这两个原始数据类型："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"let u: undefined = undefined;\nlet n: null = null;\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"6任意值-any-",children:["6、任意值（ any ）",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#6任意值-any-",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"相当于是去掉了 Typescript 的类型强调，可以给赋任何值，也可以赋值给容易，在代码中尽量不用"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"let a: any = 'string';\na = 1;\na = null;\na = undefined \n"})}),"\n",(0,s.jsxs)(e.h3,{id:"7数组",children:["7、数组",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#7数组",children:"#"})]}),"\n",(0,s.jsxs)(e.h4,{id:"ⅰ最简单的方法是使用类型--方括号来表示数组",children:["Ⅰ、最简单的方法是使用「类型 + 方括号」来表示数组：",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#ⅰ最简单的方法是使用类型--方括号来表示数组",children:"#"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"let fibonacci: number[] = [1, 1, 2, 3, 5];\n"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["数组的项中",(0,s.jsx)(e.strong,{children:"不允许"}),"出现其他的类型："]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"let fibonacci: number[] = [1, '1', 2, 3, 5];\n\n// Type 'string' is not assignable to type 'number'.\n"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"数组的一些方法的参数也会根据数组在定义时约定的类型进行限制："}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"let fibonacci: number[] = [1, 1, 2, 3, 5];\nfibonacci.push('8');\n// Argument of type '\"8\"' is not assignable to parameter of type 'number'.\n"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["上例中，",(0,s.jsx)(e.code,{children:"push"})," 方法只允许传入 ",(0,s.jsx)(e.code,{children:"number"})," 类型的参数，但是却传了一个 ",(0,s.jsx)(e.code,{children:'"8"'})," 字符串类型的参数，所以报错了。"]}),"\n"]}),"\n",(0,s.jsxs)(e.h4,{id:"ⅱ数组泛型",children:["Ⅱ、数组泛型",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#ⅱ数组泛型",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["我们也可以使用数组泛型（Array Generic） ",(0,s.jsx)(e.code,{children:"Array<elemType>"})," 来表示数组："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"let fibonacci: Array<number> = [1, 1, 2, 3, 5];\n"})}),"\n",(0,s.jsx)(e.p,{children:"关于泛型，可以参考泛型一章。"}),"\n",(0,s.jsxs)(e.h4,{id:"ⅲ用接口表示数组",children:["Ⅲ、用接口表示数组",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#ⅲ用接口表示数组",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"接口也可以用来描述数组："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"interface NumberArray {\n    [index: number]: number;\n}\nlet fibonacci: NumberArray = [1, 1, 2, 3, 5];\n"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"NumberArray"})," 表示：只要索引的类型是数字时，那么值的类型必须是数字。"]}),"\n",(0,s.jsx)(e.p,{children:"虽然接口也可以用来描述数组，但是我们一般不会这么做，因为这种方式比前两种方式复杂多了。"}),"\n",(0,s.jsx)(e.p,{children:"不过有一种情况例外，那就是它常用来表示类数组。"}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"二类型推论",children:["二、类型推论",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#二类型推论",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"如果没有明确的指定类型，那么 TypeScript 会依照类型推论的规则推断出一个类型。"}),"\n",(0,s.jsxs)(e.h3,{id:"1什么是类型推论",children:["1、什么是类型推论",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1什么是类型推论",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"以下代码虽然没有指定类型，但是会在编译的时候报错："}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"let myFavoriteNumber = 'seven';\nmyFavoriteNumber = 7;\n// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.\n"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"事实上，它等价于："}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"let myFavoriteNumber: string = 'seven';\nmyFavoriteNumber = 7;\n\n// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.\n"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"TypeScript 会在没有明确的指定类型的时候推测出一个类型，这就是类型推论。"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsxs)(e.strong,{children:["如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 ",(0,s.jsx)(e.code,{children:"any"})," 类型而完全不被类型检查"]}),"："]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"let myFavoriteNumber;\nmyFavoriteNumber = 'seven';\nmyFavoriteNumber = 7;\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"三联合类型",children:["三、联合类型",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#三联合类型",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"联合类型（Union Types）表示取值可以为多种类型中的一种。"}),"\n"]}),"\n",(0,s.jsxs)(e.h3,{id:"1简单的例子",children:["1、简单的例子",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1简单的例子",children:"#"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"let myFavoriteNumber: string | number;\nmyFavoriteNumber = 'seven';\nmyFavoriteNumber = 7;\nlet myFavoriteNumber: string | number;\nmyFavoriteNumber = true;\n\n// index.ts(2,1): error TS2322: Type 'boolean' is not assignable to type 'string | number'.\n//   Type 'boolean' is not assignable to type 'number'.\n"})}),"\n",(0,s.jsxs)(e.p,{children:["联合类型使用 ",(0,s.jsx)(e.code,{children:"|"})," 分隔每个类型。"]}),"\n",(0,s.jsxs)(e.p,{children:["这里的 ",(0,s.jsx)(e.code,{children:"let myFavoriteNumber: string | number"})," 的含义是，允许 ",(0,s.jsx)(e.code,{children:"myFavoriteNumber"})," 的类型是 ",(0,s.jsx)(e.code,{children:"string"})," 或者 ",(0,s.jsx)(e.code,{children:"number"}),"，但是不能是其他类型。"]}),"\n",(0,s.jsxs)(e.h2,{id:"四函数的类型",children:["四、函数的类型",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#四函数的类型",children:"#"})]}),"\n",(0,s.jsxs)(e.h3,{id:"1函数声明",children:["1、函数声明",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1函数声明",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"一个函数有输入和输出，要在 TypeScript 中对其进行约束，需要把输入和输出都考虑到，其中函数声明的类型定义较简单："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"function sum(x: number, y: number): number {\n    return x + y;\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["注意，",(0,s.jsx)(e.strong,{children:"输入多余的（或者少于要求的）参数，是不被允许的"}),"："]}),"\n",(0,s.jsxs)(e.h3,{id:"2函数表达式",children:["2、函数表达式",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2函数表达式",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"如果要我们现在写一个对函数表达式（Function Expression）的定义，可能会写成这样："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"let mySum = function (x: number, y: number): number {\n    return x + y;\n};\n"})}),"\n",(0,s.jsxs)(e.p,{children:["这是可以通过编译的，不过事实上，上面的代码只对等号右侧的匿名函数进行了类型定义，而等号左边的 ",(0,s.jsx)(e.code,{children:"mySum"}),"，是通过赋值操作进行类型推论而推断出来的。如果需要我们手动给 ",(0,s.jsx)(e.code,{children:"mySum"})," 添加类型，则应该是这样："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"let mySum: (x: number, y: number) => number = function (x: number, y: number): number {\n    return x + y;\n};\n"})}),"\n",(0,s.jsxs)(e.p,{children:["注意不要混淆了 TypeScript 中的 ",(0,s.jsx)(e.code,{children:"=>"})," 和 ES6 中的 ",(0,s.jsx)(e.code,{children:"=>"}),"。"]}),"\n",(0,s.jsxs)(e.p,{children:["在 TypeScript 的类型定义中，",(0,s.jsx)(e.code,{children:"=>"})," 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。"]}),"\n",(0,s.jsxs)(e.p,{children:["在 ES6 中，",(0,s.jsx)(e.code,{children:"=>"})," 叫做箭头函数，应用十分广泛，可以参考 ",(0,s.jsx)(e.a,{href:"http://es6.ruanyifeng.com/#docs/function#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0",target:"_blank",rel:"noopener noreferrer",children:"ES6 中的箭头函数"}),"。"]}),"\n",(0,s.jsxs)(e.h3,{id:"3用接口定义函数的形状",children:["3、用接口定义函数的形状",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3用接口定义函数的形状",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"我们也可以使用接口的方式来定义一个函数需要符合的形状："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"interface SearchFunc {\n    (source: string, subString: string): boolean;\n}\n\nlet mySearch: SearchFunc;\nmySearch = function(source: string, subString: string) {\n    return source.search(subString) !== -1;\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"采用函数表达式|接口定义函数的方式时，对等号左侧进行类型限制，可以保证以后对函数名赋值时保证参数个数、参数类型、返回值类型不变。"}),"\n",(0,s.jsxs)(e.h3,{id:"4可选参数",children:["4、可选参数",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#4可选参数",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"前面提到，输入多余的（或者少于要求的）参数，是不允许的。那么如何定义可选的参数呢？"}),"\n",(0,s.jsxs)(e.p,{children:["与接口中的可选属性类似，我们用 ",(0,s.jsx)(e.code,{children:"?"})," 表示可选的参数："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"function buildName(firstName: string, lastName?: string) {\n    if (lastName) {\n        return firstName + ' ' + lastName;\n    } else {\n        return firstName;\n    }\n}\nlet tomcat = buildName('Tom', 'Cat');\nlet tom = buildName('Tom');\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"5参数默认值",children:["5、参数默认值",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#5参数默认值",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["在 ES6 中，我们允许给函数的参数添加默认值，",(0,s.jsx)(e.strong,{children:"TypeScript 会将添加了默认值的参数识别为可选参数"}),"："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"function buildName(firstName: string, lastName: string = 'Cat') {\n    return firstName + ' ' + lastName;\n}\nlet tomcat = buildName('Tom', 'Cat');\nlet tom = buildName('Tom');\n"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["关于默认参数，可以参考 ",(0,s.jsx)(e.a,{href:"http://es6.ruanyifeng.com/#docs/function#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9A%84%E9%BB%98%E8%AE%A4%E5%80%BC",target:"_blank",rel:"noopener noreferrer",children:"ES6 中函数参数的默认值"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"五类型别名type",children:["五、类型别名",(0,s.jsx)(e.code,{children:"type"}),(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#五类型别名type",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"类型别名用来给一个类型起个新名字。"}),"\n",(0,s.jsxs)(e.h3,{id:"简单的例子",children:["简单的例子",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#简单的例子",children:"#"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"type Name = string;\ntype NameResolver = () => string;\ntype NameOrResolver = Name | NameResolver;\nfunction getName(n: NameOrResolver): Name {\n    if (typeof n === 'string') {\n        return n;\n    } else {\n        return n();\n    }\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["上例中，我们使用 ",(0,s.jsx)(e.code,{children:"type"})," 创建类型别名。"]}),"\n",(0,s.jsx)(e.p,{children:"类型别名常用于联合类型。"}),"\n",(0,s.jsxs)(e.h2,{id:"六类型断言",children:["六、类型断言",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#六类型断言",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"类型断言（Type Assertion）可以用来手动指定一个值的类型。"}),"\n",(0,s.jsxs)(e.h3,{id:"1语法",children:["1、语法",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1语法",children:"#"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"值 as 类型\n"})}),"\n",(0,s.jsx)(e.p,{children:"或"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"<类型>值\n"})}),"\n",(0,s.jsxs)(e.p,{children:["在 tsx 语法（React 的 jsx 语法的 ts 版）中必须使用前者，即 ",(0,s.jsx)(e.code,{children:"值 as 类型"}),"。"]}),"\n",(0,s.jsxs)(e.p,{children:["形如 ",(0,s.jsx)(e.code,{children:"<Foo>"})," 的语法在 tsx 中表示的是一个 ",(0,s.jsx)(e.code,{children:"ReactNode"}),"，在 ts 中除了表示类型断言之外，也可能是表示一个",(0,s.jsx)(e.a,{href:"/",children:"泛型"}),"。"]}),"\n",(0,s.jsxs)(e.p,{children:["故建议大家在使用类型断言时，统一使用 ",(0,s.jsx)(e.code,{children:"值 as 类型"})," 这样的语法。"]}),"\n",(0,s.jsxs)(e.h3,{id:"2类型断言的用途",children:["2、类型断言的用途",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2类型断言的用途",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"将一个联合类型断言为其中一个类型"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["之前提到过，当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们",(0,s.jsx)(e.strong,{children:"只能访问此联合类型的所有类型中共有的属性或方法"}),"："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"interface Cat {\n    name: string;\n    run(): void;\n}\ninterface Fish {\n    name: string;\n    swim(): void;\n}\n\nfunction getName(animal: Cat | Fish) {\n    return animal.name;\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"而有时候，我们确实需要在还不确定类型的时候就访问其中一个类型特有的属性或方法，比如："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"interface Cat {\n    name: string;\n    run(): void;\n}\ninterface Fish {\n    name: string;\n    swim(): void;\n}\n\nfunction isFish(animal: Cat | Fish) {\n    if (typeof animal.swim === 'function') {\n        return true;\n    }\n    return false;\n}\n\n// index.ts:11:23 - error TS2339: Property 'swim' does not exist on type 'Cat | Fish'.\n//   Property 'swim' does not exist on type 'Cat'.\n"})}),"\n",(0,s.jsxs)(e.p,{children:["上面的例子中，获取 ",(0,s.jsx)(e.code,{children:"animal.swim"})," 的时候会报错。"]}),"\n",(0,s.jsxs)(e.p,{children:["此时可以使用类型断言，将 ",(0,s.jsx)(e.code,{children:"animal"})," 断言成 ",(0,s.jsx)(e.code,{children:"Fish"}),"："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"interface Cat {\n    name: string;\n    run(): void;\n}\ninterface Fish {\n    name: string;\n    swim(): void;\n}\n//使用 值 as 类型\nfunction isFish(animal: Cat | Fish) {\n    if (typeof (animal as Fish).swim === 'function') {\n        return true;\n    }\n    return false;\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["这样就可以解决访问 ",(0,s.jsx)(e.code,{children:"animal.swim"})," 时报错的问题了。"]}),"\n",(0,s.jsx)(e.p,{children:"需要注意的是，类型断言只能够「欺骗」TypeScript 编译器，无法避免运行时的错误，反而滥用类型断言可能会导致运行时错误："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"interface Cat {\n    name: string;\n    run(): void;\n}\ninterface Fish {\n    name: string;\n    swim(): void;\n}\n\nfunction swim(animal: Cat | Fish) {\n    (animal as Fish).swim();\n}\n\nconst tom: Cat = {\n    name: 'Tom',\n    run() { console.log('run') }\n};\nswim(tom);\n// Uncaught TypeError: animal.swim is not a function`\n"})}),"\n",(0,s.jsx)(e.p,{children:"上面的例子编译时不会报错，但在运行时会报错："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-autoit",children:"Uncaught TypeError: animal.swim is not a function`\n"})}),"\n",(0,s.jsxs)(e.p,{children:["原因是 ",(0,s.jsx)(e.code,{children:"(animal as Fish).swim()"})," 这段代码隐藏了 ",(0,s.jsx)(e.code,{children:"animal"})," 可能为 ",(0,s.jsx)(e.code,{children:"Cat"})," 的情况，将 ",(0,s.jsx)(e.code,{children:"animal"})," 直接断言为 ",(0,s.jsx)(e.code,{children:"Fish"})," 了，而 TypeScript 编译器信任了我们的断言，故在调用 ",(0,s.jsx)(e.code,{children:"swim()"})," 时没有编译错误。"]}),"\n",(0,s.jsxs)(e.p,{children:["可是 ",(0,s.jsx)(e.code,{children:"swim"})," 函数接受的参数是 ",(0,s.jsx)(e.code,{children:"Cat | Fish"}),"，一旦传入的参数是 ",(0,s.jsx)(e.code,{children:"Cat"})," 类型的变量，由于 ",(0,s.jsx)(e.code,{children:"Cat"})," 上没有 ",(0,s.jsx)(e.code,{children:"swim"})," 方法，就会导致运行时错误了。"]}),"\n",(0,s.jsx)(e.p,{children:"总之，使用类型断言时一定要格外小心，尽量避免断言后调用方法或引用深层属性，以减少不必要的运行时错误。"}),"\n",(0,s.jsxs)(e.h3,{id:"3双重断言",children:["3、双重断言",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3双重断言",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"既然："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"任何类型都可以被断言为 any"}),"\n",(0,s.jsx)(e.li,{children:"any 可以被断言为任何类型"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["那么我们是不是可以使用双重断言 ",(0,s.jsx)(e.code,{children:"as any as Foo"})," 来将任何一个类型断言为任何另一个类型呢？"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"interface Cat {\n    run(): void;\n}\ninterface Fish {\n    swim(): void;\n}\n\nfunction testCat(cat: Cat) {\n    return (cat as any as Fish);\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["在上面的例子中，若直接使用 ",(0,s.jsx)(e.code,{children:"cat as Fish"})," 肯定会报错，因为 ",(0,s.jsx)(e.code,{children:"Cat"})," 和 ",(0,s.jsx)(e.code,{children:"Fish"})," 互相都不兼容。"]}),"\n",(0,s.jsxs)(e.p,{children:["但是若使用双重断言，则可以打破「要使得 ",(0,s.jsx)(e.code,{children:"A"})," 能够被断言为 ",(0,s.jsx)(e.code,{children:"B"}),"，只需要 ",(0,s.jsx)(e.code,{children:"A"})," 兼容 ",(0,s.jsx)(e.code,{children:"B"})," 或 ",(0,s.jsx)(e.code,{children:"B"})," 兼容 ",(0,s.jsx)(e.code,{children:"A"})," 即可」的限制，将任何一个类型断言为任何另一个类型。"]}),"\n",(0,s.jsx)(e.p,{children:"若你使用了这种双重断言，那么十有八九是非常错误的，它很可能会导致运行时错误。"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"**除非迫不得已，千万别用双重断言。"}),"**"]}),"\n",(0,s.jsxs)(e.h3,{id:"4类型断言----类型转换-",children:["4、类型断言  =>  类型转换 ?",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#4类型断言----类型转换-",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"类型断言只会影响 TypeScript 编译时的类型，类型断言语句在编译结果中会被删除："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"function toBoolean(something: any): boolean {\n    return something as boolean;\n}\n\ntoBoolean(1);\n// 返回值为 1\n"})}),"\n",(0,s.jsxs)(e.p,{children:["在上面的例子中，将 ",(0,s.jsx)(e.code,{children:"something"})," 断言为 ",(0,s.jsx)(e.code,{children:"boolean"})," 虽然可以通过编译，但是并没有什么用，代码在编译后会变成："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"function toBoolean(something) {\n    return something;\n}\n\ntoBoolean(1);\n// 返回值为 1\n"})}),"\n",(0,s.jsx)(e.p,{children:"所以类型断言不是类型转换，它不会真的影响到变量的类型。"}),"\n",(0,s.jsx)(e.p,{children:"若要进行类型转换，需要直接调用类型转换的方法："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"function toBoolean(something: any): boolean {\n    return Boolean(something);\n}\n\ntoBoolean(1);\n// 返回值为 true\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"七元组",children:["七、元组",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#七元组",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"数组合并了相同类型的对象，而元组（Tuple）合并了不同类型的对象。"}),"\n",(0,s.jsx)(e.p,{children:"元组起源于函数编程语言（如 F#），这些语言中会频繁使用元组。"}),"\n"]}),"\n",(0,s.jsxs)(e.h3,{id:"简单的例子-1",children:["简单的例子",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#简单的例子-1",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["定义一对值分别为 ",(0,s.jsx)(e.code,{children:"string"})," 和 ",(0,s.jsx)(e.code,{children:"number"})," 的元组："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"let tom: [string, number] = ['Tom', 25];\n"})}),"\n",(0,s.jsx)(e.p,{children:"当赋值或访问一个已知索引的元素时，会得到正确的类型："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"let tom: [string, number];\ntom[0] = 'Tom';\ntom[1] = 25;\n\ntom[0].slice(1);\ntom[1].toFixed(2);\n"})}),"\n",(0,s.jsx)(e.p,{children:"也可以只赋值其中一项："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"let tom: [string, number];\ntom[0] = 'Tom';\n"})}),"\n",(0,s.jsx)(e.p,{children:"但是当直接对元组类型的变量进行初始化或者赋值的时候，需要提供所有元组类型中指定的项。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"let tom: [string, number];\ntom = ['Tom', 25];\nlet tom: [string, number];\ntom = ['Tom'];\n\n// Property '1' is missing in type '[string]' but required in type '[string, number]'.\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"越界的元素",children:["越界的元素",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#越界的元素",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"当添加越界的元素时，它的类型会被限制为元组中每个类型的联合类型："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"let tom: [string, number];\ntom = ['Tom', 25];\ntom.push('male');\ntom.push(true);\n\n// Argument of type 'true' is not assignable to parameter of type 'string | number'.\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"八枚举enum",children:["八、枚举",(0,s.jsx)(e.code,{children:"enum"}),(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#八枚举enum",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"枚举（Enum）类型用于取值被限定在一定范围内的场景，比如一周只能有七天，颜色限定为红绿蓝等。"}),"\n"]}),"\n",(0,s.jsxs)(e.h3,{id:"简单的例子-2",children:["简单的例子",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#简单的例子-2",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["枚举使用 ",(0,s.jsx)(e.code,{children:"enum"})," 关键字来定义："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"enum Days {Sun, Mon, Tue, Wed, Thu, Fri, Sat};\n"})}),"\n",(0,s.jsxs)(e.p,{children:["枚举成员会被赋值为从 ",(0,s.jsx)(e.code,{children:"0"})," 开始递增的数字，同时也会对枚举值到枚举名进行反向映射："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:'enum Days {Sun, Mon, Tue, Wed, Thu, Fri, Sat};\n\nconsole.log(Days["Sun"] === 0); // true\nconsole.log(Days["Mon"] === 1); // true\nconsole.log(Days["Tue"] === 2); // true\nconsole.log(Days["Sat"] === 6); // true\n\nconsole.log(Days[0] === "Sun"); // true\nconsole.log(Days[1] === "Mon"); // true\nconsole.log(Days[2] === "Tue"); // true\nconsole.log(Days[6] === "Sat"); // true\n'})}),"\n",(0,s.jsx)(e.p,{children:"事实上，上面的例子会被编译为："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:'var Days;\n(function (Days) {\n    Days[Days["Sun"] = 0] = "Sun";\n    Days[Days["Mon"] = 1] = "Mon";\n    Days[Days["Tue"] = 2] = "Tue";\n    Days[Days["Wed"] = 3] = "Wed";\n    Days[Days["Thu"] = 4] = "Thu";\n    Days[Days["Fri"] = 5] = "Fri";\n    Days[Days["Sat"] = 6] = "Sat";\n})(Days || (Days = {}));\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"手动赋值",children:["手动赋值",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#手动赋值",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"我们也可以给枚举项手动赋值："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:'enum Days {Sun = 7, Mon = 1, Tue, Wed, Thu, Fri, Sat};\n\nconsole.log(Days["Sun"] === 7); // true\nconsole.log(Days["Mon"] === 1); // true\nconsole.log(Days["Tue"] === 2); // true\nconsole.log(Days["Sat"] === 6); // true\n'})}),"\n",(0,s.jsxs)(e.p,{children:["上面的例子中，",(0,s.jsx)(e.code,{children:"未手动赋值的枚举项会接着上一个枚举项递增。"})]}),"\n",(0,s.jsxs)(e.p,{children:["如果",(0,s.jsx)(e.code,{children:"未手动赋值的枚举项与手动赋值的重复了，TypeScript 是不会察觉到这一点的："})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:'enum Days {Sun = 3, Mon = 1, Tue, Wed, Thu, Fri, Sat};\n\nconsole.log(Days["Sun"] === 3); // true\nconsole.log(Days["Wed"] === 3); // true\nconsole.log(Days[3] === "Sun"); // false\nconsole.log(Days[3] === "Wed"); // true\n'})}),"\n",(0,s.jsxs)(e.p,{children:["上面的例子中，递增到 ",(0,s.jsx)(e.code,{children:"3"})," 的时候与前面的 ",(0,s.jsx)(e.code,{children:"Sun"})," 的取值重复了，但是 TypeScript 并没有报错，导致 ",(0,s.jsx)(e.code,{children:"Days[3]"})," 的值先是 ",(0,s.jsx)(e.code,{children:'"Sun"'}),"，而后又被 ",(0,s.jsx)(e.code,{children:'"Wed"'})," 覆盖了。编译的结果是："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:'var Days;\n(function (Days) {\n    Days[Days["Sun"] = 3] = "Sun";\n    Days[Days["Mon"] = 1] = "Mon";\n    Days[Days["Tue"] = 2] = "Tue";\n    Days[Days["Wed"] = 3] = "Wed";\n    Days[Days["Thu"] = 4] = "Thu";\n    Days[Days["Fri"] = 5] = "Fri";\n    Days[Days["Sat"] = 6] = "Sat";\n})(Days || (Days = {}));\n'})}),"\n",(0,s.jsx)(e.p,{children:"所以使用的时候需要注意，最好不要出现这种覆盖的情况。"}),"\n",(0,s.jsx)(e.p,{children:"手动赋值的枚举项可以不是数字，此时需要使用类型断言来让 tsc 无视类型检查 (编译出的 js 仍然是可用的)："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:'enum Days {Sun = 7, Mon, Tue, Wed, Thu, Fri, Sat = <any>"S"};\nvar Days;\n(function (Days) {\n    Days[Days["Sun"] = 7] = "Sun";\n    Days[Days["Mon"] = 8] = "Mon";\n    Days[Days["Tue"] = 9] = "Tue";\n    Days[Days["Wed"] = 10] = "Wed";\n    Days[Days["Thu"] = 11] = "Thu";\n    Days[Days["Fri"] = 12] = "Fri";\n    Days[Days["Sat"] = "S"] = "Sat";\n})(Days || (Days = {}));\n'})}),"\n",(0,s.jsxs)(e.p,{children:["当然，手动赋值的枚举项也可以为小数或负数，此时后续未手动赋值的项的递增步长仍为 ",(0,s.jsx)(e.code,{children:"1"}),"："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:'enum Days {Sun = 7, Mon = 1.5, Tue, Wed, Thu, Fri, Sat};\n\nconsole.log(Days["Sun"] === 7); // true\nconsole.log(Days["Mon"] === 1.5); // true\nconsole.log(Days["Tue"] === 2.5); // true\nconsole.log(Days["Sat"] === 6.5); // true\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"常数项和计算所得项",children:["常数项和计算所得项",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#常数项和计算所得项",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"枚举项有两种类型：常数项（constant member）和计算所得项（computed member）。"}),"\n",(0,s.jsx)(e.p,{children:"前面我们所举的例子都是常数项，一个典型的计算所得项的例子："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:'enum Color {Red, Green, Blue = "blue".length};\n'})}),"\n",(0,s.jsxs)(e.p,{children:["上面的例子中，",(0,s.jsx)(e.code,{children:'"blue".length'})," 就是一个计算所得项。"]}),"\n",(0,s.jsxs)(e.p,{children:["上面的例子不会报错，但是",(0,s.jsxs)(e.strong,{children:["如果紧接在",(0,s.jsx)(e.code,{children:"计算所得项后面的是未手动赋值的项"}),"，那么它就会因为无法获得初始值而报错"]}),"："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:'enum Color {Red = "red".length, Green, Blue};\n\n// index.ts(1,33): error TS1061: Enum member must have initializer.\n// index.ts(1,40): error TS1061: Enum member must have initializer.\n'})}),"\n",(0,s.jsxs)(e.p,{children:["下面是常数项和计算所得项的完整定义，部分引用自",(0,s.jsx)(e.a,{href:"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Enums.html",target:"_blank",rel:"noopener noreferrer",children:"中文手册 - 枚举"}),"："]}),"\n",(0,s.jsx)(e.p,{children:"当满足以下条件时，枚举成员被当作是常数："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["不具有初始化函数并且之前的枚举成员是常数。在这种情况下，当前枚举成员的值为上一个枚举成员的值加 ",(0,s.jsx)(e.code,{children:"1"}),"。但第一个枚举元素是个例外。如果它没有初始化方法，那么它的初始值为 ",(0,s.jsx)(e.code,{children:"0"}),"。"]}),"\n",(0,s.jsxs)(e.li,{children:["枚举成员使用常数枚举表达式初始化。常数枚举表达式是 TypeScript 表达式的子集，它可以在编译阶段求值。当一个表达式满足下面条件之一时，它就是一个常数枚举表达式：","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"数字字面量"}),"\n",(0,s.jsx)(e.li,{children:"引用之前定义的常数枚举成员（可以是在不同的枚举类型中定义的）如果这个成员是在同一个枚举类型中定义的，可以使用非限定名来引用"}),"\n",(0,s.jsx)(e.li,{children:"带括号的常数枚举表达式"}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"+"}),", ",(0,s.jsx)(e.code,{children:"-"}),", ",(0,s.jsx)(e.code,{children:"~"})," 一元运算符应用于常数枚举表达式"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"+"}),", ",(0,s.jsx)(e.code,{children:"-"}),", ",(0,s.jsx)(e.code,{children:"*"}),", ",(0,s.jsx)(e.code,{children:"/"}),", ",(0,s.jsx)(e.code,{children:"%"}),", ",(0,s.jsx)(e.code,{children:"<<"}),", ",(0,s.jsx)(e.code,{children:">>"}),", ",(0,s.jsx)(e.code,{children:">>>"}),", ",(0,s.jsx)(e.code,{children:"&"}),", ",(0,s.jsx)(e.code,{children:"|"}),", ",(0,s.jsx)(e.code,{children:"^"})," 二元运算符，常数枚举表达式做为其一个操作对象。若常数枚举表达式求值后为 NaN 或 Infinity，则会在编译阶段报错"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"所有其它情况的枚举成员被当作是需要计算得出的值。"}),"\n",(0,s.jsxs)(e.h3,{id:"常数枚举",children:["常数枚举",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#常数枚举",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["常数枚举是使用 ",(0,s.jsx)(e.code,{children:"const enum"})," 定义的枚举类型："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"const enum Directions {\n    Up,\n    Down,\n    Left,\n    Right\n}\n\nlet directions = [Directions.Up, Directions.Down, Directions.Left, Directions.Right];\n"})}),"\n",(0,s.jsx)(e.p,{children:"常数枚举与普通枚举的区别是，它会在编译阶段被删除，并且不能包含计算成员。"}),"\n",(0,s.jsx)(e.p,{children:"上例的编译结果是："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"var directions = [0 /* Up */, 1 /* Down */, 2 /* Left */, 3 /* Right */];\n"})}),"\n",(0,s.jsx)(e.p,{children:"假如包含了计算成员，则会在编译阶段报错："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"const enum Color {Red, Green, Blue = \"blue\".length};\n\n// index.ts(1,38): error TS2474: In 'const' enum declarations member initializer must be constant expression.\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"外部枚举",children:["外部枚举",(0,s.jsx)(e.a,{href:"https://ts.xcatliu.com/advanced/enum.html#%E5%A4%96%E9%83%A8%E6%9E%9A%E4%B8%BE",target:"_blank",rel:"noopener noreferrer",children:"\xa7"}),(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#外部枚举",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["外部枚举（Ambient Enums）是使用 ",(0,s.jsx)(e.code,{children:"declare enum"})," 定义的枚举类型："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"declare enum Directions {\n    Up,\n    Down,\n    Left,\n    Right\n}\n\nlet directions = [Directions.Up, Directions.Down, Directions.Left, Directions.Right];\n"})}),"\n",(0,s.jsxs)(e.p,{children:["之前提到过，",(0,s.jsx)(e.code,{children:"declare"})," 定义的类型只会用于编译时的检查，编译结果中会被删除。"]}),"\n",(0,s.jsx)(e.p,{children:"上例的编译结果是："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"var directions = [Directions.Up, Directions.Down, Directions.Left, Directions.Right];\n"})}),"\n",(0,s.jsx)(e.p,{children:"外部枚举与声明语句一样，常出现在声明文件中。"}),"\n",(0,s.jsxs)(e.p,{children:["同时使用 ",(0,s.jsx)(e.code,{children:"declare"})," 和 ",(0,s.jsx)(e.code,{children:"const"})," 也是可以的："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"declare const enum Directions {\n    Up,\n    Down,\n    Left,\n    Right\n}\n\nlet directions = [Directions.Up, Directions.Down, Directions.Left, Directions.Right];\n"})}),"\n",(0,s.jsx)(e.p,{children:"编译结果："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"var directions = [0 /* Up */, 1 /* Down */, 2 /* Left */, 3 /* Right */];\n"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["TypeScript 的枚举类型的概念",(0,s.jsx)(e.a,{href:"https://msdn.microsoft.com/zh-cn/library/sbbt4032.aspx",target:"_blank",rel:"noopener noreferrer",children:"来源于 C#"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"九接口",children:["九、接口",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#九接口",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"在 TypeScript 中，我们使用接口（Interfaces）来定义对象的类型。"}),"\n"]}),"\n",(0,s.jsxs)(e.h3,{id:"1什么是接口",children:["1、什么是接口",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1什么是接口",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"在面向对象语言中，接口（Interfaces）是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类（classes）去实现（implement）。"}),"\n",(0,s.jsxs)(e.p,{children:["TypeScript 中的接口是一个非常灵活的概念，除了可用于",(0,s.jsx)(e.a,{href:"/",children:"对类的一部分行为进行抽象"}),"以外，也常用于对「对象的形状（Shape）」进行描述"]}),"\n"]}),"\n",(0,s.jsxs)(e.h3,{id:"2简单的例子",children:["2、简单的例子",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2简单的例子",children:"#"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"interface Person {\n    name: string;\n    age: number;\n}\n\nlet tom: Person = {\n    name: 'Tom',\n    age: 25\n};\n"})}),"\n",(0,s.jsxs)(e.p,{children:["上面的例子中，我们定义了一个接口 ",(0,s.jsx)(e.code,{children:"Person"}),"，接着定义了一个变量 ",(0,s.jsx)(e.code,{children:"tom"}),"，它的类型是 ",(0,s.jsx)(e.code,{children:"Person"}),"。这样，我们就约束了 ",(0,s.jsx)(e.code,{children:"tom"})," 的形状必须和接口 ",(0,s.jsx)(e.code,{children:"Person"})," 一致。"]}),"\n",(0,s.jsxs)(e.h3,{id:"3可选属性",children:["3、可选属性",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3可选属性",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"有时我们希望不要完全匹配一个形状，那么可以用可选属性："}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"interface Person {\n    name: string;\n    age?: number;\n}\n\nlet tom: Person = {\n    name: 'Tom'\n};\ninterface Person {\n    name: string;\n    age?: number;\n}\n\nlet tom: Person = {\n    name: 'Tom',\n    age: 25\n};\n"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"可选属性的含义是该属性可以不存在。"}),"\n"]}),"\n",(0,s.jsxs)(e.h3,{id:"4任意属性",children:["4、任意属性",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#4任意属性",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"有时候我们希望一个接口允许有任意的属性，可以使用如下方式："}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"interface Person {\n    name: string;\n    age?: number;\n    // 前面key值取的string任意属性     后面值取的any任意值,并不是任意属性\n    //或者取这个类型string | number值  确定属性和可选属性必须为任意属性的子集\n    [propName: string]: any;\n}\n\nlet tom: Person = {\n    name: 'Tom',\n    gender: 'male'\n};\n"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["使用 ",(0,s.jsx)(e.code,{children:"[propName: string]"})," 定义了任意属性取 ",(0,s.jsx)(e.code,{children:"string"})," 类型的值。"]}),"\n"]}),"\n",(0,s.jsxs)(e.h3,{id:"5只读属性",children:["5、只读属性",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#5只读属性",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["有时候我们希望对象中的一些字段只能在创建的时候被赋值，那么可以用 ",(0,s.jsx)(e.code,{children:"readonly"})," 定义只读属性："]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"interface Person {\n    readonly id: number;\n    name: string;\n    age?: number;\n    [propName: string]: any;\n}\n\nlet tom: Person = {\n    id: 89757,\n    name: 'Tom',\n    gender: 'male'\n};\n\ntom.id = 9527;\n\n// index.ts(14,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-only property.\n"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["上例中，使用 ",(0,s.jsx)(e.code,{children:"readonly"})," 定义的属性 ",(0,s.jsx)(e.code,{children:"id"})," 初始化后，又被赋值了，所以报错了。"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"十类",children:["十、类",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#十类",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"TypeScript 除了实现了所有 ES6 中的类的功能以外，还添加了一些新的用法。"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"public"})," 修饰的属性或方法是公有的，可以在任何地方被访问到，默认所有的属性和方法都是 ",(0,s.jsx)(e.code,{children:"public"})," 的"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"private"})," 修饰的属性或方法是私有的，不能在声明它的类的外部访问"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"protected"})," 修饰的属性或方法是受保护的，它和 ",(0,s.jsx)(e.code,{children:"private"})," 类似，区别是它在子类中也是允许被访问的"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"下面举一些例子："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"class Animal {\n  public name;\n  public constructor(name) {\n    this.name = name;\n  }\n}\n\nlet a = new Animal('Jack');\nconsole.log(a.name); // Jack\na.name = 'Tom';\nconsole.log(a.name); // Tom\n"})}),"\n",(0,s.jsxs)(e.p,{children:["上面的例子中，",(0,s.jsx)(e.code,{children:"name"})," 被设置为了 ",(0,s.jsx)(e.code,{children:"public"}),"，所以直接访问实例的 ",(0,s.jsx)(e.code,{children:"name"})," 属性是允许的。"]}),"\n",(0,s.jsxs)(e.p,{children:["很多时候，我们希望有的属性是无法直接存取的，这时候就可以用 ",(0,s.jsx)(e.code,{children:"private"})," 了："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"class Animal {\n  private name;\n  public constructor(name) {\n    this.name = name;\n  }\n}\n\nlet a = new Animal('Jack');\nconsole.log(a.name); // Jack\na.name = 'Tom';\n\n// index.ts(9,13): error TS2341: Property 'name' is private and only accessible within class 'Animal'.\n// index.ts(10,1): error TS2341: Property 'name' is private and only accessible within class 'Animal'.\n"})}),"\n",(0,s.jsxs)(e.p,{children:["需要注意的是，TypeScript 编译之后的代码中，并没有限制 ",(0,s.jsx)(e.code,{children:"private"})," 属性在外部的可访问性。"]}),"\n",(0,s.jsx)(e.p,{children:"上面的例子编译后的代码是："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"var Animal = (function () {\n  function Animal(name) {\n    this.name = name;\n  }\n  return Animal;\n})();\nvar a = new Animal('Jack');\nconsole.log(a.name);\na.name = 'Tom';\n"})}),"\n",(0,s.jsxs)(e.p,{children:["使用 ",(0,s.jsx)(e.code,{children:"private"})," 修饰的属性或方法，在子类中也是不允许访问的："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"class Animal {\n  private name;\n  public constructor(name) {\n    this.name = name;\n  }\n}\n\nclass Cat extends Animal {\n  constructor(name) {\n    super(name);\n    console.log(this.name);\n  }\n}\n\n// index.ts(11,17): error TS2341: Property 'name' is private and only accessible within class 'Animal'.\n"})}),"\n",(0,s.jsxs)(e.p,{children:["而如果是用 ",(0,s.jsx)(e.code,{children:"protected"})," 修饰，则允许在子类中访问："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"class Animal {\n  protected name;\n  public constructor(name) {\n    this.name = name;\n  }\n}\n\nclass Cat extends Animal {\n  constructor(name) {\n    super(name);\n    console.log(this.name);\n  }\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["当构造函数修饰为 ",(0,s.jsx)(e.code,{children:"private"})," 时，该类不允许被继承或者实例化："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"class Animal {\n  public name;\n  private constructor(name) {\n    this.name = name;\n  }\n}\nclass Cat extends Animal {\n  constructor(name) {\n    super(name);\n  }\n}\n\nlet a = new Animal('Jack');\n\n// index.ts(7,19): TS2675: Cannot extend a class 'Animal'. Class constructor is marked as private.\n// index.ts(13,9): TS2673: Constructor of class 'Animal' is private and only accessible within the class declaration.\n"})}),"\n",(0,s.jsxs)(e.p,{children:["当构造函数修饰为 ",(0,s.jsx)(e.code,{children:"protected"})," 时，该类只允许被继承："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"class Animal {\n  public name;\n  protected constructor(name) {\n    this.name = name;\n  }\n}\nclass Cat extends Animal {\n  constructor(name) {\n    super(name);\n  }\n}\n\nlet a = new Animal('Jack');\n\n// index.ts(13,9): TS2674: Constructor of class 'Animal' is protected and only accessible within the class declaration.\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"参数属性",children:["参数属性",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#参数属性",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["修饰符和",(0,s.jsx)(e.code,{children:"readonly"}),"还可以使用在构造函数参数中，等同于类中定义该属性同时给该属性赋值，使代码更简洁。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"class Animal {\n  // public name: string;\n  public constructor(public name) {\n    // this.name = name;\n  }\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"readonly",children:["readonly",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#readonly",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"只读属性关键字，只允许出现在属性声明或索引签名或构造函数中。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"class Animal {\n  readonly name;\n  public constructor(name) {\n    this.name = name;\n  }\n}\n\nlet a = new Animal('Jack');\nconsole.log(a.name); // Jack\na.name = 'Tom';\n\n// index.ts(10,3): TS2540: Cannot assign to 'name' because it is a read-only property.\n"})}),"\n",(0,s.jsxs)(e.p,{children:["注意如果 ",(0,s.jsx)(e.code,{children:"readonly"})," 和其他访问修饰符同时存在的话，需要写在其后面。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"class Animal {\n  // public readonly name;\n  public constructor(public readonly name) {\n    // this.name = name;\n  }\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"抽象类",children:["抽象类",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#抽象类",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"abstract"})," 用于定义抽象类和其中的抽象方法。"]}),"\n",(0,s.jsx)(e.p,{children:"什么是抽象类？"}),"\n",(0,s.jsx)(e.p,{children:"首先，抽象类是不允许被实例化的："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"abstract class Animal {\n  public name;\n  public constructor(name) {\n    this.name = name;\n  }\n  public abstract sayHi();\n}\n\nlet a = new Animal('Jack');\n\n// index.ts(9,11): error TS2511: Cannot create an instance of the abstract class 'Animal'.\n"})}),"\n",(0,s.jsxs)(e.p,{children:["上面的例子中，我们定义了一个抽象类 ",(0,s.jsx)(e.code,{children:"Animal"}),"，并且定义了一个抽象方法 ",(0,s.jsx)(e.code,{children:"sayHi"}),"。在实例化抽象类的时候报错了。"]}),"\n",(0,s.jsx)(e.p,{children:"其次，抽象类中的抽象方法必须被子类实现："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"abstract class Animal {\n  public name;\n  public constructor(name) {\n    this.name = name;\n  }\n  public abstract sayHi();\n}\n\nclass Cat extends Animal {\n  public eat() {\n    console.log(`${this.name} is eating.`);\n  }\n}\n\nlet cat = new Cat('Tom');\n\n// index.ts(9,7): error TS2515: Non-abstract class 'Cat' does not implement inherited abstract member 'sayHi' from class 'Animal'.\n"})}),"\n",(0,s.jsxs)(e.p,{children:["上面的例子中，我们定义了一个类 ",(0,s.jsx)(e.code,{children:"Cat"})," 继承了抽象类 ",(0,s.jsx)(e.code,{children:"Animal"}),"，但是没有实现抽象方法 ",(0,s.jsx)(e.code,{children:"sayHi"}),"，所以编译报错了。"]}),"\n",(0,s.jsx)(e.p,{children:"下面是一个正确使用抽象类的例子："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"abstract class Animal {\n  public name;\n  public constructor(name) {\n    this.name = name;\n  }\n  public abstract sayHi();\n}\n\nclass Cat extends Animal {\n  public sayHi() {\n    console.log(`Meow, My name is ${this.name}`);\n  }\n}\n\nlet cat = new Cat('Tom');\n"})}),"\n",(0,s.jsxs)(e.p,{children:["上面的例子中，我们实现了抽象方法 ",(0,s.jsx)(e.code,{children:"sayHi"}),"，编译通过了。"]}),"\n",(0,s.jsx)(e.p,{children:"需要注意的是，即使是抽象方法，TypeScript 的编译结果中，仍然会存在这个类，上面的代码的编译结果是："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"var __extends =\n  (this && this.__extends) ||\n  function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());\n  };\nvar Animal = (function () {\n  function Animal(name) {\n    this.name = name;\n  }\n  return Animal;\n})();\nvar Cat = (function (_super) {\n  __extends(Cat, _super);\n  function Cat() {\n    _super.apply(this, arguments);\n  }\n  Cat.prototype.sayHi = function () {\n    console.log('Meow, My name is ' + this.name);\n  };\n  return Cat;\n})(Animal);\nvar cat = new Cat('Tom');\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"类的类型",children:["类的类型",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#类的类型",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"给类加上 TypeScript 的类型很简单，与接口类似："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"class Animal {\n  name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n  sayHi(): string {\n    return `My name is ${this.name}`;\n  }\n}\n\nlet a: Animal = new Animal('Jack');\nconsole.log(a.sayHi()); // My name is Jack\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"十一类与接口",children:["十一、类与接口",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#十一类与接口",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"接口（Interfaces）可以用于对「对象的形状（Shape）」进行描述。"}),"\n",(0,s.jsx)(e.p,{children:"这一章主要介绍接口的另一个用途，对类的一部分行为进行抽象。"}),"\n",(0,s.jsxs)(e.h3,{id:"类实现接口",children:["类实现接口",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#类实现接口",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["实现（implements）是面向对象中的一个重要概念。一般来讲，一个类只能继承自另一个类，有时候不同类之间可以有一些共有的特性，这时候就可以把特性提取成接口（interfaces），用 ",(0,s.jsx)(e.code,{children:"implements"})," 关键字来实现。这个特性大大提高了面向对象的灵活性。"]}),"\n",(0,s.jsx)(e.p,{children:"举例来说，门是一个类，防盗门是门的子类。如果防盗门有一个报警器的功能，我们可以简单的给防盗门添加一个报警方法。这时候如果有另一个类，车，也有报警器的功能，就可以考虑把报警器提取出来，作为一个接口，防盗门和车都去实现它："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"interface Alarm {\n    alert(): void;\n}\n\nclass Door {\n}\n\nclass SecurityDoor extends Door implements Alarm {\n    alert() {\n        console.log('SecurityDoor alert');\n    }\n}\n\nclass Car implements Alarm {\n    alert() {\n        console.log('Car alert');\n    }\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"一个类可以实现多个接口："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"interface Alarm {\n    alert(): void;\n}\n\ninterface Light {\n    lightOn(): void;\n    lightOff(): void;\n}\n\nclass Car implements Alarm, Light {\n    alert() {\n        console.log('Car alert');\n    }\n    lightOn() {\n        console.log('Car light on');\n    }\n    lightOff() {\n        console.log('Car light off');\n    }\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["上例中，",(0,s.jsx)(e.code,{children:"Car"})," 实现了 ",(0,s.jsx)(e.code,{children:"Alarm"})," 和 ",(0,s.jsx)(e.code,{children:"Light"})," 接口，既能报警，也能开关车灯。"]}),"\n",(0,s.jsxs)(e.h3,{id:"接口继承接口",children:["接口继承接口",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#接口继承接口",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"接口与接口之间可以是继承关系："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"interface Alarm {\n    alert(): void;\n}\n\ninterface LightableAlarm extends Alarm {\n    lightOn(): void;\n    lightOff(): void;\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["这很好理解，",(0,s.jsx)(e.code,{children:"LightableAlarm"})," 继承了 ",(0,s.jsx)(e.code,{children:"Alarm"}),"，除了拥有 ",(0,s.jsx)(e.code,{children:"alert"})," 方法之外，还拥有两个新方法 ",(0,s.jsx)(e.code,{children:"lightOn"})," 和 ",(0,s.jsx)(e.code,{children:"lightOff"}),"。"]}),"\n",(0,s.jsxs)(e.h3,{id:"接口继承类",children:["接口继承类",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#接口继承类",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"常见的面向对象语言中，接口是不能继承类的，但是在 TypeScript 中却是可以的："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"class Point {\n    x: number;\n    y: number;\n    constructor(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n    }\n}\n\ninterface Point3d extends Point {\n    z: number;\n}\n\nlet point3d: Point3d = {x: 1, y: 2, z: 3};\n"})}),"\n",(0,s.jsx)(e.p,{children:"为什么 TypeScript 会支持接口继承类呢？"}),"\n",(0,s.jsxs)(e.p,{children:["实际上，当我们在声明 ",(0,s.jsx)(e.code,{children:"class Point"})," 时，除了会创建一个名为 ",(0,s.jsx)(e.code,{children:"Point"})," 的类之外，同时也创建了一个名为 ",(0,s.jsx)(e.code,{children:"Point"})," 的类型（实例的类型）。"]}),"\n",(0,s.jsxs)(e.p,{children:["所以我们既可以将 ",(0,s.jsx)(e.code,{children:"Point"})," 当做一个类来用（使用 ",(0,s.jsx)(e.code,{children:"new Point"})," 创建它的实例）："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"class Point {\n    x: number;\n    y: number;\n    constructor(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n    }\n}\n\nconst p = new Point(1, 2);\n"})}),"\n",(0,s.jsxs)(e.p,{children:["也可以将 ",(0,s.jsx)(e.code,{children:"Point"})," 当做一个类型来用（使用 ",(0,s.jsx)(e.code,{children:": Point"})," 表示参数的类型）："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"class Point {\n    x: number;\n    y: number;\n    constructor(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n    }\n}\n\nfunction printPoint(p: Point) {\n    console.log(p.x, p.y);\n}\n\nprintPoint(new Point(1, 2));\n"})}),"\n",(0,s.jsx)(e.p,{children:"这个例子实际上可以等价于："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"class Point {\n    x: number;\n    y: number;\n    constructor(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n    }\n}\n\ninterface PointInstanceType {\n    x: number;\n    y: number;\n}\n\nfunction printPoint(p: PointInstanceType) {\n    console.log(p.x, p.y);\n}\n\nprintPoint(new Point(1, 2));\n"})}),"\n",(0,s.jsxs)(e.p,{children:["上例中我们新声明的 ",(0,s.jsx)(e.code,{children:"PointInstanceType"})," 类型，与声明 ",(0,s.jsx)(e.code,{children:"class Point"})," 时创建的 ",(0,s.jsx)(e.code,{children:"Point"})," 类型是等价的。"]}),"\n",(0,s.jsxs)(e.p,{children:["所以回到 ",(0,s.jsx)(e.code,{children:"Point3d"})," 的例子中，我们就能很容易的理解为什么 TypeScript 会支持接口继承类了："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"class Point {\n    x: number;\n    y: number;\n    constructor(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n    }\n}\n\ninterface PointInstanceType {\n    x: number;\n    y: number;\n}\n\n// 等价于 interface Point3d extends PointInstanceType\ninterface Point3d extends Point {\n    z: number;\n}\n\nlet point3d: Point3d = {x: 1, y: 2, z: 3};\n"})}),"\n",(0,s.jsxs)(e.p,{children:["当我们声明 ",(0,s.jsx)(e.code,{children:"interface Point3d extends Point"})," 时，",(0,s.jsx)(e.code,{children:"Point3d"})," 继承的实际上是类 ",(0,s.jsx)(e.code,{children:"Point"})," 的实例的类型。"]}),"\n",(0,s.jsxs)(e.p,{children:["换句话说，可以理解为定义了一个接口 ",(0,s.jsx)(e.code,{children:"Point3d"})," 继承另一个接口 ",(0,s.jsx)(e.code,{children:"PointInstanceType"}),"。"]}),"\n",(0,s.jsx)(e.p,{children:"所以「接口继承类」和「接口继承接口」没有什么本质的区别。"}),"\n",(0,s.jsxs)(e.p,{children:["值得注意的是，",(0,s.jsx)(e.code,{children:"PointInstanceType"})," 相比于 ",(0,s.jsx)(e.code,{children:"Point"}),"，缺少了 ",(0,s.jsx)(e.code,{children:"constructor"})," 方法，这是因为声明 ",(0,s.jsx)(e.code,{children:"Point"})," 类时创建的 ",(0,s.jsx)(e.code,{children:"Point"})," 类型是不包含构造函数的。另外，除了构造函数是不包含的，静态属性或静态方法也是不包含的（实例的类型当然不应该包括构造函数、静态属性或静态方法）。"]}),"\n",(0,s.jsxs)(e.p,{children:["换句话说，声明 ",(0,s.jsx)(e.code,{children:"Point"})," 类时创建的 ",(0,s.jsx)(e.code,{children:"Point"})," 类型只包含其中的实例属性和实例方法："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"class Point {\n    /** 静态属性，坐标系原点 */\n    static origin = new Point(0, 0);\n    /** 静态方法，计算与原点距离 */\n    static distanceToOrigin(p: Point) {\n        return Math.sqrt(p.x * p.x + p.y * p.y);\n    }\n    /** 实例属性，x 轴的值 */\n    x: number;\n    /** 实例属性，y 轴的值 */\n    y: number;\n    /** 构造函数 */\n    constructor(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n    }\n    /** 实例方法，打印此点 */\n    printPoint() {\n        console.log(this.x, this.y);\n    }\n}\n\ninterface PointInstanceType {\n    x: number;\n    y: number;\n    printPoint(): void;\n}\n\nlet p1: Point;\nlet p2: PointInstanceType;\n"})}),"\n",(0,s.jsxs)(e.p,{children:["上例中最后的类型 ",(0,s.jsx)(e.code,{children:"Point"})," 和类型 ",(0,s.jsx)(e.code,{children:"PointInstanceType"})," 是等价的。"]}),"\n",(0,s.jsx)(e.p,{children:"同样的，在接口继承类的时候，也只会继承它的实例属性和实例方法。"}),"\n",(0,s.jsxs)(e.h2,{id:"十二泛型",children:["十二、泛型",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#十二泛型",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。"}),"\n",(0,s.jsxs)(e.h3,{id:"简单的例子-3",children:["简单的例子",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#简单的例子-3",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["首先，我们来实现一个函数 ",(0,s.jsx)(e.code,{children:"createArray"}),"，它可以创建一个指定长度的数组，同时将每一项都填充一个默认值："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"function createArray(length: number, value: any): Array<any> {\n    let result = [];\n    for (let i = 0; i < length; i++) {\n        result[i] = value;\n    }\n    return result;\n}\n\ncreateArray(3, 'x'); // ['x', 'x', 'x']\n"})}),"\n",(0,s.jsxs)(e.p,{children:["上例中，我们使用了",(0,s.jsx)(e.a,{href:"/",children:"之前提到过的数组泛型"}),"来定义返回值的类型。"]}),"\n",(0,s.jsx)(e.p,{children:"这段代码编译不会报错，但是一个显而易见的缺陷是，它并没有准确的定义返回值的类型："}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"Array<any>"})," 允许数组的每一项都为任意类型。但是我们预期的是，数组中每一项都应该是输入的 ",(0,s.jsx)(e.code,{children:"value"})," 的类型。"]}),"\n",(0,s.jsx)(e.p,{children:"这时候，泛型就派上用场了："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"function createArray<T>(length: number, value: T): Array<T> {\n    let result: T[] = [];\n    for (let i = 0; i < length; i++) {\n        result[i] = value;\n    }\n    return result;\n}\n\ncreateArray<string>(3, 'x'); // ['x', 'x', 'x']\n"})}),"\n",(0,s.jsxs)(e.p,{children:["上例中，我们在函数名后添加了 ",(0,s.jsx)(e.code,{children:"<T>"}),"，其中 ",(0,s.jsx)(e.code,{children:"T"})," 用来指代任意输入的类型，在后面的输入 ",(0,s.jsx)(e.code,{children:"value: T"})," 和输出 ",(0,s.jsx)(e.code,{children:"Array<T>"})," 中即可使用了。"]}),"\n",(0,s.jsxs)(e.p,{children:["接着在调用的时候，可以指定它具体的类型为 ",(0,s.jsx)(e.code,{children:"string"}),"。当然，也可以不手动指定，而让类型推论自动推算出来："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"function createArray<T>(length: number, value: T): Array<T> {\n    let result: T[] = [];\n    for (let i = 0; i < length; i++) {\n        result[i] = value;\n    }\n    return result;\n}\n\ncreateArray(3, 'x'); // ['x', 'x', 'x']\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"多个类型参数",children:["多个类型参数",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#多个类型参数",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"定义泛型的时候，可以一次定义多个类型参数："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"function swap<T, U>(tuple: [T, U]): [U, T] {\n    return [tuple[1], tuple[0]];\n}\n\nswap([7, 'seven']); // ['seven', 7]\n"})}),"\n",(0,s.jsxs)(e.p,{children:["上例中，我们定义了一个 ",(0,s.jsx)(e.code,{children:"swap"})," 函数，用来交换输入的元组。"]}),"\n",(0,s.jsxs)(e.h3,{id:"泛型约束",children:["泛型约束",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#泛型约束",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"在函数内部使用泛型变量的时候，由于事先不知道它是哪种类型，所以不能随意的操作它的属性或方法："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"function loggingIdentity<T>(arg: T): T {\n    console.log(arg.length);\n    return arg;\n}\n\n// index.ts(2,19): error TS2339: Property 'length' does not exist on type 'T'.\n"})}),"\n",(0,s.jsxs)(e.p,{children:["上例中，泛型 ",(0,s.jsx)(e.code,{children:"T"})," 不一定包含属性 ",(0,s.jsx)(e.code,{children:"length"}),"，所以编译的时候报错了。"]}),"\n",(0,s.jsxs)(e.p,{children:["这时，我们可以对泛型进行约束，只允许这个函数传入那些包含 ",(0,s.jsx)(e.code,{children:"length"})," 属性的变量。这就是泛型约束："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"interface Lengthwise {\n    length: number;\n}\n\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\n    console.log(arg.length);\n    return arg;\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["上例中，我们使用了 ",(0,s.jsx)(e.code,{children:"extends"})," 约束了泛型 ",(0,s.jsx)(e.code,{children:"T"})," 必须符合接口 ",(0,s.jsx)(e.code,{children:"Lengthwise"})," 的形状，也就是必须包含 ",(0,s.jsx)(e.code,{children:"length"})," 属性。"]}),"\n",(0,s.jsxs)(e.p,{children:["此时如果调用 ",(0,s.jsx)(e.code,{children:"loggingIdentity"})," 的时候，传入的 ",(0,s.jsx)(e.code,{children:"arg"})," 不包含 ",(0,s.jsx)(e.code,{children:"length"}),"，那么在编译阶段就会报错了："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"interface Lengthwise {\n    length: number;\n}\n\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\n    console.log(arg.length);\n    return arg;\n}\n\nloggingIdentity(7);\n\n// index.ts(10,17): error TS2345: Argument of type '7' is not assignable to parameter of type 'Lengthwise'.\n"})}),"\n",(0,s.jsx)(e.p,{children:"多个类型参数之间也可以互相约束："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"function copyFields<T extends U, U>(target: T, source: U): T {\n    for (let id in source) {\n        target[id] = (<T>source)[id];\n    }\n    return target;\n}\n\nlet x = { a: 1, b: 2, c: 3, d: 4 };\n\ncopyFields(x, { b: 10, d: 20 });\n"})}),"\n",(0,s.jsxs)(e.p,{children:["上例中，我们使用了两个类型参数，其中要求 ",(0,s.jsx)(e.code,{children:"T"})," 继承 ",(0,s.jsx)(e.code,{children:"U"}),"，这样就保证了 ",(0,s.jsx)(e.code,{children:"U"})," 上不会出现 ",(0,s.jsx)(e.code,{children:"T"})," 中不存在的字段。"]}),"\n",(0,s.jsxs)(e.h3,{id:"泛型接口",children:["泛型接口",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#泛型接口",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"可以使用接口的方式来定义一个函数需要符合的形状："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"interface SearchFunc {\n  (source: string, subString: string): boolean;\n}\n\nlet mySearch: SearchFunc;\nmySearch = function(source: string, subString: string) {\n    return source.search(subString) !== -1;\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"当然也可以使用含有泛型的接口来定义函数的形状："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"interface CreateArrayFunc {\n    <T>(length: number, value: T): Array<T>;\n}\n\nlet createArray: CreateArrayFunc;\ncreateArray = function<T>(length: number, value: T): Array<T> {\n    let result: T[] = [];\n    for (let i = 0; i < length; i++) {\n        result[i] = value;\n    }\n    return result;\n}\n\ncreateArray(3, 'x'); // ['x', 'x', 'x']\n"})}),"\n",(0,s.jsx)(e.p,{children:"进一步，我们可以把泛型参数提前到接口名上："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"interface CreateArrayFunc<T> {\n    (length: number, value: T): Array<T>;\n}\n\nlet createArray: CreateArrayFunc<any>;\ncreateArray = function<T>(length: number, value: T): Array<T> {\n    let result: T[] = [];\n    for (let i = 0; i < length; i++) {\n        result[i] = value;\n    }\n    return result;\n}\n\ncreateArray(3, 'x'); // ['x', 'x', 'x']\n"})}),"\n",(0,s.jsx)(e.p,{children:"注意，此时在使用泛型接口的时候，需要定义泛型的类型。"}),"\n",(0,s.jsxs)(e.h3,{id:"泛型类",children:["泛型类",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#泛型类",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"与泛型接口类似，泛型也可以用于类的类型定义中："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"class GenericNumber<T> {\n    zeroValue: T;\n    add: (x: T, y: T) => T;\n}\n\nlet myGenericNumber = new GenericNumber<number>();\nmyGenericNumber.zeroValue = 0;\nmyGenericNumber.add = function(x, y) { return x + y; };\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"泛型参数的默认类型",children:["泛型参数的默认类型",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#泛型参数的默认类型",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"在 TypeScript 2.3 以后，我们可以为泛型中的类型参数指定默认类型。当使用泛型时没有在代码中直接指定类型参数，从实际值参数中也无法推测出时，这个默认类型就会起作用。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"function createArray<T = string>(length: number, value: T): Array<T> {\n    let result: T[] = [];\n    for (let i = 0; i < length; i++) {\n        result[i] = value;\n    }\n    return result;\n}\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"十三声明合并",children:["十三、声明合并",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#十三声明合并",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"如果定义了两个相同名字的函数、接口或类，那么它们会合并成一个类型："}),"\n",(0,s.jsxs)(e.h3,{id:"函数的合并",children:["函数的合并",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#函数的合并",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"我们可以使用重载定义多个函数类型："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"function reverse(x: number): number;\nfunction reverse(x: string): string;\n//重载需要合并 否则报错\nfunction reverse(x: number | string): number | string {\n    if (typeof x === 'number') {\n        return Number(x.toString().split('').reverse().join(''));\n    } else if (typeof x === 'string') {\n        return x.split('').reverse().join('');\n    }\n     return 0//这里必须加上一个return 数字或者字符串,否则报错没有返回值\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"接口的合并",children:["接口的合并",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#接口的合并",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"接口中的属性在合并时会简单的合并到一个接口中："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"interface Alarm {\n    price: number;\n}\ninterface Alarm {\n    weight: number;\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"相当于："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"interface Alarm {\n    price: number;\n    weight: number;\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["注意，",(0,s.jsx)(e.strong,{children:"合并的属性的类型必须是唯一的"}),"："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"interface Alarm {\n    price: number;\n}\ninterface Alarm {\n    price: number;  // 虽然重复了，但是类型都是 `number`，所以不会报错\n    weight: number;\n}\ninterface Alarm {\n    price: number;\n}\ninterface Alarm {\n    price: string;  // 类型不一致，会报错\n    weight: number;\n}\n\n// index.ts(5,3): error TS2403: Subsequent variable declarations must have the same type.  Variable 'price' must be of type 'number', but here has type 'string'.\n"})}),"\n",(0,s.jsx)(e.p,{children:"接口中方法的合并，与函数的合并一样："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"interface Alarm {\n    price: number;\n    alert(s: string): string;\n}\ninterface Alarm {\n    weight: number;\n    alert(s: string, n: number): string;\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"相当于："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"interface Alarm {\n    price: number;\n    weight: number;\n    alert(s: string): string;\n    alert(s: string, n: number): string;\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"类的合并",children:["类的合并",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#类的合并",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"类的合并与接口的合并规则一致。"})]})}function a(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}let l=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["frontEnd%2Ftypescript%2Fbase.md"]={toc:[{text:"一、数据类型。",id:"一数据类型",depth:2},{text:"1、布尔值",id:"1布尔值",depth:3},{text:"2、数值",id:"2数值",depth:3},{text:"3、字符串",id:"3字符串",depth:3},{text:"4、空值",id:"4空值",depth:3},{text:"5、Null 和 Undefined",id:"5null-和-undefined",depth:3},{text:"6、任意值（ any ）",id:"6任意值-any-",depth:3},{text:"7、数组",id:"7数组",depth:3},{text:"Ⅰ、最简单的方法是使用「类型 + 方括号」来表示数组：",id:"ⅰ最简单的方法是使用类型--方括号来表示数组",depth:4},{text:"Ⅱ、数组泛型",id:"ⅱ数组泛型",depth:4},{text:"Ⅲ、用接口表示数组",id:"ⅲ用接口表示数组",depth:4},{text:"二、类型推论",id:"二类型推论",depth:2},{text:"1、什么是类型推论",id:"1什么是类型推论",depth:3},{text:"三、联合类型",id:"三联合类型",depth:2},{text:"1、简单的例子",id:"1简单的例子",depth:3},{text:"四、函数的类型",id:"四函数的类型",depth:2},{text:"1、函数声明",id:"1函数声明",depth:3},{text:"2、函数表达式",id:"2函数表达式",depth:3},{text:"3、用接口定义函数的形状",id:"3用接口定义函数的形状",depth:3},{text:"4、可选参数",id:"4可选参数",depth:3},{text:"5、参数默认值",id:"5参数默认值",depth:3},{text:"五、类型别名`type`",id:"五类型别名type",depth:2},{text:"简单的例子",id:"简单的例子",depth:3},{text:"六、类型断言",id:"六类型断言",depth:2},{text:"1、语法",id:"1语法",depth:3},{text:"2、类型断言的用途",id:"2类型断言的用途",depth:3},{text:"3、双重断言",id:"3双重断言",depth:3},{text:"4、类型断言  =>  类型转换 ?",id:"4类型断言----类型转换-",depth:3},{text:"七、元组",id:"七元组",depth:2},{text:"简单的例子",id:"简单的例子-1",depth:3},{text:"越界的元素",id:"越界的元素",depth:3},{text:"八、枚举`enum`",id:"八枚举enum",depth:2},{text:"简单的例子",id:"简单的例子-2",depth:3},{text:"手动赋值",id:"手动赋值",depth:3},{text:"常数项和计算所得项",id:"常数项和计算所得项",depth:3},{text:"常数枚举",id:"常数枚举",depth:3},{text:"外部枚举\xa7",id:"外部枚举",depth:3},{text:"九、接口",id:"九接口",depth:2},{text:"1、什么是接口",id:"1什么是接口",depth:3},{text:"2、简单的例子",id:"2简单的例子",depth:3},{text:"3、可选属性",id:"3可选属性",depth:3},{text:"4、任意属性",id:"4任意属性",depth:3},{text:"5、只读属性",id:"5只读属性",depth:3},{text:"十、类",id:"十类",depth:2},{text:"参数属性",id:"参数属性",depth:3},{text:"readonly",id:"readonly",depth:3},{text:"抽象类",id:"抽象类",depth:3},{text:"类的类型",id:"类的类型",depth:3},{text:"十一、类与接口",id:"十一类与接口",depth:2},{text:"类实现接口",id:"类实现接口",depth:3},{text:"接口继承接口",id:"接口继承接口",depth:3},{text:"接口继承类",id:"接口继承类",depth:3},{text:"十二、泛型",id:"十二泛型",depth:2},{text:"简单的例子",id:"简单的例子-3",depth:3},{text:"多个类型参数",id:"多个类型参数",depth:3},{text:"泛型约束",id:"泛型约束",depth:3},{text:"泛型接口",id:"泛型接口",depth:3},{text:"泛型类",id:"泛型类",depth:3},{text:"泛型参数的默认类型",id:"泛型参数的默认类型",depth:3},{text:"十三、声明合并",id:"十三声明合并",depth:2},{text:"函数的合并",id:"函数的合并",depth:3},{text:"接口的合并",id:"接口的合并",depth:3},{text:"类的合并",id:"类的合并",depth:3}],title:"TypeScript 基础",frontmatter:{title:"TypeScript 基础",date:"2022-06-07T12:37:52.000Z"}}}}]);