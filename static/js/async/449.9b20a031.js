"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["449"],{4011:function(e,n,r){r.r(n),r.d(n,{default:function(){return h}});var a=r(2676),d=r(453);function s(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",pre:"pre",code:"code"},(0,d.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"css3-容器查询-简明指南",children:["CSS3 容器查询 简明指南",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#css3-容器查询-简明指南",children:"#"})]}),"\n",(0,a.jsxs)(n.h2,{id:"1-什么是容器查询",children:["1. 什么是容器查询？",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-什么是容器查询",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"容器查询（Container Queries）是 CSS 中的一项新功能，它可以根据一个容器元素的尺寸来改变该元素内部内容的样式，而不仅仅是基于视口（浏览器窗口）尺寸。这样，我们就能创建更加灵活和自适应的布局。"}),"\n",(0,a.jsxs)(n.h3,{id:"示例",children:["示例：",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"假设有一个容器宽度变化的卡片组件，我们可以使用容器查询调整卡片样式："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",children:"/* 当容器宽度大于500px时，卡片的背景色变为红色 */\n@container (min-width: 500px) {\n  .card {\n    background-color: red;\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"2-如何使用容器查询",children:["2. 如何使用容器查询？",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-如何使用容器查询",children:"#"})]}),"\n",(0,a.jsxs)(n.h3,{id:"21-启用容器查询",children:["2.1 启用容器查询",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#21-启用容器查询",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["首先，容器元素需要声明 ",(0,a.jsx)(n.code,{children:"contain"})," 属性，才能作为容器查询的参考元素。"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",children:".container {\n  contain: layout style;\n}\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"22-容器查询的基本语法",children:["2.2 容器查询的基本语法",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#22-容器查询的基本语法",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"容器查询语法类似于媒体查询，我们可以根据容器的宽度、高度来应用不同的样式。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",children:"/* 当容器宽度大于500px时，改变卡片的布局 */\n@container (min-width: 500px) {\n  .card {\n    display: flex;\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"3-容器查询的实际应用",children:["3. 容器查询的实际应用",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-容器查询的实际应用",children:"#"})]}),"\n",(0,a.jsxs)(n.h3,{id:"31-响应式组件设计",children:["3.1 响应式组件设计",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#31-响应式组件设计",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"容器查询可以让我们设计响应式的组件，而不需要依赖视口的大小。比如在一个组件的容器变宽时，我们调整它的布局和样式。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",children:"/* 容器宽度大于600px时，改变按钮的字体大小 */\n@container (min-width: 600px) {\n  .button {\n    font-size: 18px;\n  }\n}\n\n/* 容器宽度小于600px时，改变按钮的字体大小 */\n@container (max-width: 599px) {\n  .button {\n    font-size: 12px;\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"32-适应不同容器的布局",children:["3.2 适应不同容器的布局",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#32-适应不同容器的布局",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"容器查询也可以帮助调整组件内的元素布局，比如在一个容器内，网格布局可以根据容器的宽度来改变列数。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",children:"/* 容器宽度大于800px时，使用3列布局 */\n@container (min-width: 800px) {\n  .grid {\n    grid-template-columns: repeat(3, 1fr);\n  }\n}\n\n/* 容器宽度小于800px时，使用2列布局 */\n@container (max-width: 799px) {\n  .grid {\n    grid-template-columns: repeat(2, 1fr);\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"4-总结",children:["4. 总结",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-总结",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"容器查询让我们能够根据容器的尺寸来动态调整布局和样式，而不依赖于视口。这使得响应式设计更加灵活和精细，特别是对于组件级别的设计。"})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(s,{...e})}):s(e)}let h=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["frontEnd%2Fcss%2Fcontainer.md"]={toc:[{text:"1. 什么是容器查询？",id:"1-什么是容器查询",depth:2},{text:"示例：",id:"示例",depth:3},{text:"2. 如何使用容器查询？",id:"2-如何使用容器查询",depth:2},{text:"2.1 启用容器查询",id:"21-启用容器查询",depth:3},{text:"2.2 容器查询的基本语法",id:"22-容器查询的基本语法",depth:3},{text:"3. 容器查询的实际应用",id:"3-容器查询的实际应用",depth:2},{text:"3.1 响应式组件设计",id:"31-响应式组件设计",depth:3},{text:"3.2 适应不同容器的布局",id:"32-适应不同容器的布局",depth:3},{text:"4. 总结",id:"4-总结",depth:2}],title:"container 容器查询",headingTitle:"CSS3 容器查询 简明指南",frontmatter:{title:"container 容器查询",date:"2023-08-18T10:18:00.000Z"}}}}]);